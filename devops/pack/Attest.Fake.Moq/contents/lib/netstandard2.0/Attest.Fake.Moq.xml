<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Attest.Fake.Moq</name>
    </assembly>
    <members>
        <member name="T:Attest.Fake.Moq.ConstraintFactory">
            <summary>
            Represents a factory for creating argument constraints
            </summary>
            <seealso cref="T:Attest.Fake.Core.IConstraintFactory" />
        </member>
        <member name="M:Attest.Fake.Moq.ConstraintFactory.IsAny``1">
            <summary>
            Creates a constraint that accepts any argument value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Moq.ConstraintFactory.Matches``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a constraint that accepts only argument that matches the specified predicate.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Moq.Fake`1">
            <summary>
            Implementation of fake using <see cref="N:Attest.Fake.Moq"/> framework
            </summary>
            <typeparam name="TFaked">Type of faked service</typeparam>
        </member>
        <member name="M:Attest.Fake.Moq.Fake`1.Setup(System.Linq.Expressions.Expression{System.Action{`0}})">
            <inheritdoc />       
        </member>
        <member name="M:Attest.Fake.Moq.Fake`1.Setup``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />       
        </member>
        <member name="P:Attest.Fake.Moq.Fake`1.Object">
            <inheritdoc />        
        </member>
        <member name="M:Attest.Fake.Moq.Fake`1.VerifyCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <inheritdoc />       
        </member>
        <member name="M:Attest.Fake.Moq.Fake`1.VerifyNoCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <inheritdoc />       
        </member>
        <member name="M:Attest.Fake.Moq.Fake`1.VerifySingleCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <inheritdoc />     
        </member>
        <member name="M:Attest.Fake.Moq.Fake`1.Raise(System.Action{`0},System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Attest.Fake.Moq.MoqFakeCallback`1">
            <summary>
            Implementation of fake callback without return value using Moq framework.
            </summary>
            <typeparam name="TFake">Type of faked service</typeparam>
        </member>
        <member name="T:Attest.Fake.Moq.MoqFakeCallbackWithResult`2">
            <summary>
            Implementation of fake callback with return value using Moq framework.
            </summary>
            <typeparam name="TFake">Type of faked service</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="T:Attest.Fake.Moq.FakeFactory">
            <summary>
            Implementation of fake factory using Moq framework
            </summary>    
        </member>
        <member name="M:Attest.Fake.Moq.FakeFactory.CreateFake``1">
            <summary>
            Returns an instance of fake.
            </summary>
            <typeparam name="TFaked">Type of fake</typeparam>
            <returns>Fake instance</returns>
        </member>
        <member name="M:Attest.Fake.Moq.FakeFactory.CreateMock``1">
            <summary>
            Return an instance of mock.
            </summary>
            <typeparam name="TFaked">Type of mock</typeparam>
            <returns>Mock instance</returns>
        </member>
        <member name="T:Attest.Fake.Moq.It">
            <summary>
            Wrapper class for specifying value constraints.
            </summary>
        </member>
        <member name="M:Attest.Fake.Moq.It.IsAny``1">
            <summary>
            Matches any value of the given type
            </summary>
            <typeparam name="TValue">Type of value to be matched</typeparam>
            <returns>Value match</returns>
        </member>
        <member name="M:Attest.Fake.Moq.It.Is``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Matches any value that satisfies the given predicate
            </summary>
            <typeparam name="TValue">Type of value to be matched</typeparam>
            <param name="testExpression">Predicate to be satisfied</param>
            <returns>Value match</returns>
        </member>
    </members>
</doc>

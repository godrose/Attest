<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Attest.Fake.Core</name>
    </assembly>
    <members>
        <member name="T:Attest.Fake.Core.ConstraintFactoryContext">
            <summary>
            Ambient context for <see cref="T:Attest.Fake.Core.IConstraintFactory"/>
            </summary>
        </member>
        <member name="P:Attest.Fake.Core.ConstraintFactoryContext.Current">
            <summary>
            Gets or sets the current value of <see cref="T:Attest.Fake.Core.IConstraintFactory"/>.
            </summary>
            <value>
            The current.
            </value>
        </member>
        <member name="T:Attest.Fake.Core.FakeFactoryContext">
            <summary>
            Ambient context for <see cref="T:Attest.Fake.Core.IFakeFactory"/>
            </summary>
        </member>
        <member name="P:Attest.Fake.Core.FakeFactoryContext.Current">
            <summary>
            Gets or sets the current value of <see cref="T:Attest.Fake.Core.IFakeFactory"/>.
            </summary>
            <value>
            The current.
            </value>
        </member>
        <member name="T:Attest.Fake.Core.IConstraintFactory">
            <summary>
            Represents a factory for creating argument constraints.
            </summary>
        </member>
        <member name="M:Attest.Fake.Core.IConstraintFactory.IsAny``1">
            <summary>
            Creates a constraint that accepts any argument value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Core.IConstraintFactory.Matches``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a constraint that accepts only an argument that matches the specified predicate.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Core.IFake`1">
            <summary>
            Represents an abstraction for a fake object.
            </summary>
            <typeparam name="TFaked">Type of faked service</typeparam>
        </member>
        <member name="M:Attest.Fake.Core.IFake`1.Setup(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Sets up the fake according to the provided setup expression of fake call
            </summary>
            <param name="expression">Setup expression</param>
            <returns>Fake callback after the setup</returns>
        </member>
        <member name="M:Attest.Fake.Core.IFake`1.Setup``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets up the fake according to the provided setup expression of fake call with return value
            </summary>
            <typeparam name="TResult">Type of return value</typeparam>
            <param name="expression">Setup expression</param>
            <returns>Fake callback after the setup</returns>
        </member>
        <member name="T:Attest.Fake.Core.IEventInvoker`1">
            <summary>
            Represents means for raising events on a fake object.
            </summary>
            <typeparam name="TFaked">Type of faked service</typeparam>
        </member>
        <member name="M:Attest.Fake.Core.IEventInvoker`1.Raise(System.Action{`0},System.EventArgs)">
            <summary>
            Raises the specified event on the fake object.
            </summary>
            <param name="eventExpression">The event to be raised.</param>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="T:Attest.Fake.Core.IFakeCallback">
            <summary>
            Represents an abstraction over calling methods without return value on the fake
            </summary>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallback.Callback(System.Action)">
            <summary>
            Sets up the callback to an action with 0 parameters when invoked on the fake
            </summary>
            <param name="action">Action that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallback.Callback``1(System.Action{``0})">
            <summary>
            Sets up the callback to an action with 1 parameter when invoked on the fake
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="action">Action that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallback.Callback``2(System.Action{``0,``1})">
            <summary>
            Sets up the callback to an action with 2 parameters when invoked on the fake
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <param name="action">Action that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallback.Callback``3(System.Action{``0,``1,``2})">
            <summary>
            Sets up the callback to an action with 3 parameters when invoked on the fake
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <typeparam name="T3">Type of the third parameter</typeparam>
            <param name="action">Action that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallback.Callback``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Sets up the callback to an action with 4 parameters when invoked on the fake
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <typeparam name="T3">Type of the third parameter</typeparam>
            <typeparam name="T4">Type of the fourth parameter</typeparam>
            <param name="action">Action that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallback.Callback``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Sets up the callback to an action with 5 parameters when invoked on the fake
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <typeparam name="T3">Type of the third parameter</typeparam>
            <typeparam name="T4">Type of the fourth parameter</typeparam>
            <typeparam name="T5">Type of the fifth parameter</typeparam>
            <param name="action">Action that will be invoked on the fake</param>
        </member>
        <member name="T:Attest.Fake.Core.IFakeCallbackWithResult`1">
            <summary>
            Represents an abstraction over calling methods with return value on the fake
            </summary>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallbackWithResult`1.Callback(System.Func{`0})">
            <summary>
            Sets up the callback to a func with 0 parameters when invoked on the fake
            </summary>
            <param name="valueFunction">Func that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallbackWithResult`1.Callback``1(System.Func{``0,`0})">
            <summary>
            Sets up the callback to a func with 1 parameter when invoked on the fake
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="valueFunction">Func that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallbackWithResult`1.Callback``2(System.Func{``0,``1,`0})">
            <summary>
            Sets up the callback to a func with 2 parameters when invoked on the fake
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <param name="valueFunction">Func that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallbackWithResult`1.Callback``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Sets up the callback to a func with 3 parameters when invoked on the fake
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <typeparam name="T3">Type of the third parameter</typeparam>
            <param name="valueFunction">Func that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallbackWithResult`1.Callback``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Sets up the callback to a func with 4 parameters when invoked on the fake
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <typeparam name="T3">Type of the third parameter</typeparam>
            <typeparam name="T4">Type of the fourth parameter</typeparam>
            <param name="valueFunction">Func that will be invoked on the fake</param>
        </member>
        <member name="M:Attest.Fake.Core.IFakeCallbackWithResult`1.Callback``5(System.Func{``0,``1,``2,``3,``4,`0})">
            <summary>
            Sets up the callback to a func with 5 parameters when invoked on the fake
            </summary>
            <typeparam name="T1">Type of the first parameter</typeparam>
            <typeparam name="T2">Type of the second parameter</typeparam>
            <typeparam name="T3">Type of the third parameter</typeparam>
            <typeparam name="T4">Type of the fourth parameter</typeparam>
            <typeparam name="T5">Type of the fifth parameter</typeparam>
            <param name="valueFunction">Func that will be invoked on the fake</param>
        </member>
        <member name="T:Attest.Fake.Core.IFakeFactory">
            <summary>
            Factory for creating fakes and mocks
            </summary>
        </member>
        <member name="M:Attest.Fake.Core.IFakeFactory.CreateFake``1">
            <summary>
            Returns an instance of fake
            </summary>
            <typeparam name="TFaked">Type of fake</typeparam>
            <returns>Fake instance</returns>
        </member>
        <member name="M:Attest.Fake.Core.IFakeFactory.CreateMock``1">
            <summary>
            Returns an instance of mock
            </summary>
            <typeparam name="TFaked">Type of mock</typeparam>
            <returns>Mock instance</returns>
        </member>
        <member name="T:Attest.Fake.Core.IHaveFake`1">
            <summary>
            Represents an object that contains a to-be-faked service of another type
            </summary>
            <typeparam name="TFaked">Type of faked service</typeparam>
        </member>
        <member name="P:Attest.Fake.Core.IHaveFake`1.Object">
            <summary>
            Faked service
            </summary>
        </member>
        <member name="T:Attest.Fake.Core.IMock`1">
            <summary>
            Represents a mock, i.e. an object that can be tested for various method calls
            </summary>
            <typeparam name="TFaked">Type of fake</typeparam>
        </member>
        <member name="M:Attest.Fake.Core.IMock`1.VerifyCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Verifies that a specific method was called on the fake
            </summary>
            <param name="expression">Verified method's call definition</param>
        </member>
        <member name="M:Attest.Fake.Core.IMock`1.VerifyNoCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Verifies that a specific method was not called on the fake
            </summary>
            <param name="expression">Verified method's call definition</param>
        </member>
        <member name="M:Attest.Fake.Core.IMock`1.VerifySingleCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Verifies that a specific method was called exactly once on the fake
            </summary>
            <param name="expression">Verified method's call definition</param>
        </member>
        <member name="T:Attest.Fake.Core.It">
            <summary>
            Used for static access to the argument constraints.
            </summary>
        </member>
        <member name="M:Attest.Fake.Core.It.IsAny``1">
            <summary>
            Creates a constraint that accepts any argument value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Core.It.Matches``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a constraint that accepts only an argument that matches the specified predicate.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
    </members>
</doc>

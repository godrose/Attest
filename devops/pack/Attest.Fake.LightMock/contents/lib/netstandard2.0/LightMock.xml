<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LightMock</name>
    </assembly>
    <members>
        <member name="T:LightMock.Arrangement">
            <summary>
            A class that represents an arrangement of a mocked method.
            </summary>
        </member>
        <member name="M:LightMock.Arrangement.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:LightMock.Arrangement"/> class.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> that specifies
            where to apply this <see cref="T:LightMock.Arrangement"/>.</param>
        </member>
        <member name="M:LightMock.Arrangement.Throws``1">
            <summary>
            Arranges for an <see cref="T:System.Exception"/> of type <typeparamref name="TException"/> to be thrown.
            </summary>
            <typeparam name="TException">The type of <see cref="T:System.Exception"/> to be thrown.</typeparam>
        </member>
        <member name="M:LightMock.Arrangement.Throws``1(System.Func{``0})">
            <summary>
            Arranges for an <see cref="T:System.Exception"/> of type <typeparamref name="TException"/> to be thrown.
            </summary>
            <typeparam name="TException">The type of <see cref="T:System.Exception"/> to be thrown.</typeparam>
            <param name="factory">A factory delegate used to create the <typeparamref name="TException"/> instance.</param>
        </member>
        <member name="M:LightMock.Arrangement.Callback(System.Action)">
            <summary>
            Arranges for the <paramref name="callBack"/> to be called when the mocked method is invoked.
            </summary>
            <param name="callBack">The <see cref="T:System.Action"/> to be called when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement.Callback``1(System.Action{``0})">
            <summary>
            Arranges for the <paramref name="callBack"/> to be called when the mocked method is invoked.
            </summary>
            <typeparam name="T">The type of the first parameter.</typeparam>
            <param name="callBack">The <see cref="T:System.Action`1"/> to be called when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement.Callback``2(System.Action{``0,``1})">
            <summary>
            Arranges for the <paramref name="callBack"/> to be called when the mocked method is invoked.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="callBack">The <see cref="T:System.Action`2"/> to be called when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement.Callback``3(System.Action{``0,``1,``2})">
            <summary>
            Arranges for the <paramref name="callBack"/> to be called when the mocked method is invoked.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="callBack">The <see cref="T:System.Action`2"/> to be called when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement.Callback``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Arranges for the <paramref name="callBack"/> to be called when the mocked method is invoked.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="callBack">The <see cref="T:System.Action`2"/> to be called when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement.Callback``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Arranges for the <paramref name="callBack"/> to be called when the mocked method is invoked.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <param name="callBack">The <see cref="T:System.Action`2"/> to be called when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement.Callback``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Arranges for the <paramref name="callBack"/> to be called when the mocked method is invoked.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="T6">The type of the sixth parameter.</typeparam>
            <param name="callBack">The <see cref="T:System.Action`2"/> to be called when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement.Matches(LightMock.InvocationInfo)">
            <summary>
            Determines if the <paramref name="invocationInfo"/> matches this <see cref="T:LightMock.Arrangement"/>.
            </summary>
            <param name="invocationInfo">The <see cref="T:LightMock.InvocationInfo"/> that represents the method invocation.</param>
            <returns><b>True</b> if the <paramref name="invocationInfo"/> matches this <see cref="T:LightMock.Arrangement"/>, otherwise, <b>False</b>.</returns>
        </member>
        <member name="M:LightMock.Arrangement.Execute(System.Object[])">
            <summary>
            Executes the arrangement.
            </summary>
            <param name="arguments">The arguments used to invoke the mocked method.</param>
            <returns>The registered return value, if any, otherwise, the default value.</returns>
        </member>
        <member name="T:LightMock.Arrangement`1">
            <summary>
            A class that represents an arrangement of a mocked method that 
            returns a value of type <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The type of the return value of the mocked method.</typeparam>
        </member>
        <member name="M:LightMock.Arrangement`1.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:LightMock.Arrangement`1"/> class.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> that specifies
            where to apply this <see cref="T:LightMock.Arrangement"/>.</param>
        </member>
        <member name="M:LightMock.Arrangement`1.Returns(`0)">
            <summary>
            Arranges for the mocked method to return a value of type <typeparamref name="TResult"/>.
            </summary>
            <param name="value">The value to be returned from the mocked method.</param>
        </member>
        <member name="M:LightMock.Arrangement`1.Returns(System.Func{`0})">
            <summary>
            Arranges for the mocked method to return a value of type <typeparamref name="TResult"/>. 
            Return value is set by the <paramref name="getResultFunc"/> when the mocked method is invoked.
            </summary>
            <param name="getResultFunc">The <see cref="T:System.Func`1"/> is executed and returns value when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement`1.Returns``1(System.Func{``0,`0})">
            <summary>
            Arranges for the mocked method to return a value of type <typeparamref name="TResult"/>. 
            Return value is set by the <paramref name="getResultFunc"/> when the mocked method is invoked.
            </summary>
            <typeparam name="T">The type of the first parameter.</typeparam>
            <param name="getResultFunc">The <see cref="T:System.Func`2"/> is executed and returns value when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement`1.Returns``2(System.Func{``0,``1,`0})">
            <summary>
            Arranges for the mocked method to return a value of type <typeparamref name="TResult"/>. 
            Return value is set by the <paramref name="getResultFunc"/> when the mocked method is invoked.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="getResultFunc">The <see cref="T:System.Func`3"/> is executed and returns value when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement`1.Returns``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Arranges for the mocked method to return a value of type <typeparamref name="TResult"/>. 
            Return value is set by the <paramref name="getResultFunc"/> when the mocked method is invoked.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="getResultFunc">The <see cref="T:System.Func`4"/> is executed and returns value when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement`1.Returns``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Arranges for the mocked method to return a value of type <typeparamref name="TResult"/>. 
            Return value is set by the <paramref name="getResultFunc"/> when the mocked method is invoked.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="getResultFunc">The <see cref="T:System.Func`5"/> is executed and returns value when the mocked method is invoked.</param>
        </member>
        <member name="M:LightMock.Arrangement`1.Execute(System.Object[])">
            <summary>
            Executes the arrangement.
            </summary>
            <param name="arguments">The arguments used to invoke the mocked method.</param>
            <returns>The registered return value, if any, otherwise, the default value.</returns>
        </member>
        <member name="T:LightMock.ExpressionExtensions">
            <summary>
            A set of <see cref="T:System.Linq.Expressions.LambdaExpression"/> extension methods.
            </summary>
        </member>
        <member name="M:LightMock.ExpressionExtensions.Simplify(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Simplifies the target <paramref name="expression"/>.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> to simplify.</param>
            <returns>A simplified version of the target <paramref name="expression"/></returns>
        </member>
        <member name="M:LightMock.ExpressionExtensions.ToInvocationInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Creates an <see cref="T:LightMock.InvocationInfo"/> instance from the target <paramref name="expression"/>.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> from which to create an <see cref="T:LightMock.InvocationInfo"/> instance.</param>
            <returns><see cref="T:LightMock.InvocationInfo"/>.</returns>
        </member>
        <member name="M:LightMock.ExpressionExtensions.ToMatchInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Creates a <see cref="T:LightMock.MatchInfo"/> instance from the target <paramref name="expression"/>.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> from which to create a <see cref="T:LightMock.MatchInfo"/> instance.</param>
            <returns><see cref="T:LightMock.MatchInfo"/>.</returns>
        </member>
        <member name="T:LightMock.IInvocationContext`1">
            <summary>
            Represents a class that keeps track of method invocations made to 
            a manual mock object. 
            </summary>
            <typeparam name="TMock">The mock target type.</typeparam>
        </member>
        <member name="M:LightMock.IInvocationContext`1.Invoke(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Tracks that the method represented by the <paramref name="expression"/>
            has been invoked.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that 
            represents the method that has been invoked.</param>
        </member>
        <member name="M:LightMock.IInvocationContext`1.Invoke``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tracks that the method represented by the <paramref name="expression"/>
            has been invoked.
            </summary>
            <typeparam name="TResult">The return type of the method that has been invoked.</typeparam>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that 
            represents the method that has been invoked.</param>
            <returns>An instance of <typeparamref name="TResult"/> or possibly null 
            if <typeparamref name="TResult"/> a reference type.</returns>
        </member>
        <member name="M:LightMock.IInvocationContext`1.InvokeSetter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Tracks that the setter represented by the <paramref name="expression"/>
            has been invoked.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that 
            represents the setter that has been invoked.</param>
            <param name="value">The value</param>
        </member>
        <member name="T:LightMock.IInvocationInfoBuilder">
            <summary>
            Represents a class that is capable of building 
            an <see cref="T:LightMock.InvocationInfo"/> that represents information 
            about a method invocation.
            </summary>
        </member>
        <member name="M:LightMock.IInvocationInfoBuilder.Build(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns an <see cref="T:LightMock.InvocationInfo"/> instance that contains the target method 
            along with the arguments used to invoke the method.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression"/> from 
            which to extract the method and its arguments.</param>
            <returns>A <see cref="T:LightMock.InvocationInfo"/> instance representing 
            the target method and the arguments used to invoke the method.</returns>
        </member>
        <member name="T:LightMock.IMatchInfoBuilder">
            <summary>
            Represents a class that is capable of building 
            a set of lambda expressions used to match argument values.
            </summary>
        </member>
        <member name="M:LightMock.IMatchInfoBuilder.Build(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Builds a new <see cref="T:LightMock.MatchInfo"/> instance that is used to 
            match a method invocation.
            </summary>
            <param name="expression">The target <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</param>
            <returns>A <see cref="T:LightMock.MatchInfo"/> instance that represents the target method
            and a <see cref="T:System.Linq.Expressions.LambdaExpression"/> list where each element represents 
            matching an argument value.</returns>      
        </member>
        <member name="T:LightMock.IMockContext`1">
            <summary>
            Represents a class that is capable of verifying method 
            invocations made to a mock object.
            </summary>
            <typeparam name="TMock">The target mock type.</typeparam>
        </member>
        <member name="M:LightMock.IMockContext`1.Arrange(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Arranges a mocked method. 
            </summary>
            <param name="matchExpression">The match expression that describes where 
            this <see cref="T:LightMock.Arrangement"/> will be applied.</param>
            <returns>A new <see cref="T:LightMock.Arrangement"/> used to apply method behavior.</returns>
        </member>
        <member name="M:LightMock.IMockContext`1.Arrange``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Arranges a mocked method. 
            </summary>
            <typeparam name="TResult">The type of value returned from the mocked method.</typeparam>
            <param name="matchExpression">The match expression that describes where 
            this <see cref="T:LightMock.Arrangement`1"/> will be applied.</param>
            <returns>A new <see cref="T:LightMock.Arrangement`1"/> used to apply method behavior.</returns>
        </member>
        <member name="M:LightMock.IMockContext`1.ArrangeProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Arranges a mocked property. 
            </summary>
            <typeparam name="TResult">The type of value returned from the mocked property.</typeparam>
            <param name="matchExpression">The match expression that describes where 
            this <see cref="T:LightMock.PropertyArrangement`1"/> will be applied.</param>
            <returns>A new <see cref="T:LightMock.PropertyArrangement`1"/> used to apply property behavior.</returns>
        </member>
        <member name="M:LightMock.IMockContext`1.Assert(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Verifies that the method represented by the <paramref name="matchExpression"/> has 
            been invoked.
            </summary>
            <param name="matchExpression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that represents 
            the method invocation to be verified.</param>
        </member>
        <member name="M:LightMock.IMockContext`1.Assert(System.Linq.Expressions.Expression{System.Action{`0}},LightMock.Invoked)">
            <summary>
            Verifies that the method represented by the <paramref name="matchExpression"/> has 
            been invoked the specified number of <paramref name="invoked"/>.
            </summary>
            <param name="matchExpression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that represents 
            the method invocation to be verified.</param>
            <param name="invoked">Specifies the number of times we expect the mocked method to be invoked.</param>
        </member>
        <member name="T:LightMock.InvocationInfo">
            <summary>
            A class that represents a method invocations.
            </summary>
        </member>
        <member name="M:LightMock.InvocationInfo.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LightMock.InvocationInfo"/> class.
            </summary>
            <param name="method">The invoked method.</param>
            <param name="arguments">The arguments used to invoked the method.</param>
        </member>
        <member name="M:LightMock.InvocationInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:LightMock.InvocationInfo"/> class.
            </summary>
            <param name="memberInfo">The invoked property member</param>
        </member>
        <member name="P:LightMock.InvocationInfo.Member">
            <summary>
            Get the invoked member.
            </summary>
        </member>
        <member name="P:LightMock.InvocationInfo.Arguments">
            <summary>
            Gets the arguments used to invoke the method.
            </summary>
        </member>
        <member name="P:LightMock.InvocationInfo.ExpressionType">
            <summary>
            Gets the expression type.
            </summary>
        </member>
        <member name="T:LightMock.InvocationInfoBuilder">
            <summary>
            An <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> that extracts 
            the target <see cref="T:System.Reflection.MethodInfo"/> along with the 
            arguments used to invoke the method.
            </summary>
        </member>
        <member name="M:LightMock.InvocationInfoBuilder.Build(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns an <see cref="T:LightMock.InvocationInfo"/> instance that contains the target method 
            along with the arguments used to invoke the method.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression"/> from 
            which to extract the method and its arguments.</param>
            <returns>A <see cref="T:LightMock.InvocationInfo"/> instance representing 
            the target method and the arguments used to invoke the method.</returns>
        </member>
        <member name="M:LightMock.InvocationInfoBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any sub expression was modified;
            otherwise, returns the original expression.</returns>
        </member>
        <member name="T:LightMock.Invoked">
            <summary>
            A class used to specify the number of times 
            we expect a method to be invoked.
            </summary>
        </member>
        <member name="M:LightMock.Invoked.#ctor(System.Func{System.Int32,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:LightMock.Invoked"/> class.
            </summary>
            <param name="evaluator">A function delegate used to evaluate the actual number 
            of method invocations.</param>
        </member>
        <member name="P:LightMock.Invoked.Once">
            <summary>
            Gets a new <see cref="T:LightMock.Invoked"/> specifying that method should be invoked exactly once.
            </summary>
        </member>
        <member name="P:LightMock.Invoked.Never">
            <summary>
            Gets a new <see cref="T:LightMock.Invoked"/> specifying that method should never have been invoked.
            </summary>
        </member>
        <member name="M:LightMock.Invoked.AtLeast(System.Int32)">
            <summary>
            Specifies that the mocked method should be invoked at least a given number of times.
            </summary>
            <param name="callCount">The expected number of times for the mocked method to be invoked.</param>
            <returns>An <see cref="T:LightMock.Invoked"/> instance that represent the expected number of invocations.</returns>
        </member>
        <member name="M:LightMock.Invoked.Exactly(System.Int32)">
            <summary>
            Specifies that the mocked method should be invoked a given number of times.
            </summary>
            <param name="callCount">The expected number of times for the mocked method to be invoked.</param>
            <returns>An <see cref="T:LightMock.Invoked"/> instance that represent the expected number of invocations.</returns>
        </member>
        <member name="M:LightMock.Invoked.Verify(System.Int32)">
            <summary>
            Verifies that the actual <paramref name="callCount"/> matches the expected call count.
            </summary>
            <param name="callCount">The actual number of times the mocked method has been invoked.</param>
            <returns><b>True</b> if the actual <paramref name="callCount"/> matches the expected 
            call count, otherwise, <b>False</b>.</returns>
        </member>
        <member name="T:LightMock.MatchExpressionRewriter">
            <summary>
            An <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> that replaces references to the 
            <see cref="P:LightMock.The`1.IsAnyValue"/> with a <see cref="T:System.Linq.Expressions.MethodCallExpression"/> 
            that represents calling the <see cref="M:LightMock.The`1.Is(System.Func{`0,System.Boolean})"/> method.    
            </summary>
        </member>
        <member name="M:LightMock.MatchExpressionRewriter.Rewrite(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Replaces references to the <see cref="P:LightMock.The`1.IsAnyValue"/> with a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>
            that represents calling the <see cref="M:LightMock.The`1.Is(System.Func{`0,System.Boolean})"/> method.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> to visit.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="M:LightMock.MatchExpressionRewriter.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Replaces references to the <see cref="P:LightMock.The`1.IsAnyValue"/> with a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>
            that represents calling the <see cref="M:LightMock.The`1.Is(System.Func{`0,System.Boolean})"/> method.
            </summary>
            <param name="node">The <see cref="T:System.Linq.Expressions.MemberExpression"/> to visit.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression"/>.</returns>
        </member>
        <member name="T:LightMock.MatchInfo">
            <summary>
            A class that is used to match a method invocation.
            </summary>
        </member>
        <member name="M:LightMock.MatchInfo.#ctor(System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:LightMock.MatchInfo"/> class.
            </summary>
            <param name="method">The target method to match.</param>
            <param name="matchExpressions">An <see cref="T:System.Linq.Expressions.LambdaExpression"/> array that 
            represents matching argument values.</param>
        </member>
        <member name="M:LightMock.MatchInfo.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:LightMock.MatchInfo"/> class.
            </summary>
            <param name="memberInfo">The target member to match.</param>
        </member>
        <member name="M:LightMock.MatchInfo.Matches(LightMock.InvocationInfo)">
            <summary>
            Determines if the <paramref name="invocationInfo"/> matches this <see cref="T:LightMock.MatchInfo"/>.
            </summary>
            <param name="invocationInfo">The <see cref="T:LightMock.InvocationInfo"/> to be matched.</param>
            <returns><b>True</b> if the <paramref name="invocationInfo"/> matches 
            this <see cref="T:LightMock.MatchInfo"/>, otherwise, <b>False</b>.</returns>
        </member>
        <member name="P:LightMock.MatchInfo.ExpressionType">
            <summary>
            Gets the expression type.
            </summary>
        </member>
        <member name="T:LightMock.MatchInfoBuilder">
            <summary>
            A class that is capable of building a set of 
            lambda expressions used to match argument values.    
            </summary>
        </member>
        <member name="M:LightMock.MatchInfoBuilder.Build(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Builds a new <see cref="T:LightMock.MatchInfo"/> instance that is used to 
            match a method invocation.
            </summary>
            <param name="expression">The target <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</param>
            <returns>A <see cref="T:LightMock.MatchInfo"/> instance that represents the target method
            and a <see cref="T:System.Linq.Expressions.LambdaExpression"/> list where each element represents 
            matching an argument value.</returns>      
        </member>
        <member name="M:LightMock.MatchInfoBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.MethodCallExpression"/> and creates a match 
            expression for each argument.
            </summary>
            <param name="node">The <see cref="T:System.Linq.Expressions.MethodCallExpression"/> to visit.</param>
            <returns><see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
        </member>
        <member name="T:LightMock.MockContext`1">
            <summary>
            A class that represents the mock context for a given <typeparamref name="TMock"/> type.
            </summary>
            <typeparam name="TMock">The target mock type.</typeparam>
        </member>
        <member name="M:LightMock.MockContext`1.Arrange(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Arranges a mocked method. 
            </summary>
            <param name="matchExpression">The match expression that describes where 
            this <see cref="T:LightMock.Arrangement"/> will be applied.</param>
            <returns>A new <see cref="T:LightMock.Arrangement"/> used to apply method behavior.</returns>
        </member>
        <member name="M:LightMock.MockContext`1.Arrange``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Arranges a mocked method. 
            </summary>
            <typeparam name="TResult">The type of value returned from the mocked method.</typeparam>
            <param name="matchExpression">The match expression that describes where 
            this <see cref="T:LightMock.Arrangement`1"/> will be applied.</param>
            <returns>A new <see cref="T:LightMock.Arrangement`1"/> used to apply method behavior.</returns>
        </member>
        <member name="M:LightMock.MockContext`1.ArrangeProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Arranges a mocked property. 
            </summary>
            <typeparam name="TResult">The type of value returned from the mocked property.</typeparam>
            <param name="matchExpression">The match expression that describes where 
            this <see cref="T:LightMock.PropertyArrangement`1"/> will be applied.</param>
            <returns>A new <see cref="T:LightMock.PropertyArrangement`1"/> used to apply property behavior.</returns>
        </member>
        <member name="M:LightMock.MockContext`1.Assert(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Verifies that the method represented by the <paramref name="matchExpression"/> has 
            been invoked.
            </summary>
            <param name="matchExpression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that represents 
            the method invocation to be verified.</param>
        </member>
        <member name="M:LightMock.MockContext`1.Assert(System.Linq.Expressions.Expression{System.Action{`0}},LightMock.Invoked)">
            <summary>
            Verifies that the method represented by the <paramref name="matchExpression"/> has 
            been invoked the specified number of <paramref name="invoked"/>.
            </summary>
            <param name="matchExpression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that represents 
            the method invocation to be verified.</param>
            <param name="invoked">Specifies the number of times we expect the mocked method to be invoked.</param>
        </member>
        <member name="M:LightMock.MockContext`1.LightMock#IInvocationContext{TMock}#Invoke(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Tracks that the method represented by the <paramref name="expression"/>
            has been invoked.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that 
            represents the method that has been invoked.</param>
        </member>
        <member name="M:LightMock.MockContext`1.LightMock#IInvocationContext{TMock}#Invoke``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tracks that the method represented by the <paramref name="expression"/>
            has been invoked.
            </summary>
            <typeparam name="TResult">The return type of the method that has been invoked.</typeparam>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that 
            represents the method that has been invoked.</param>
            <returns>An instance of <typeparamref name="TResult"/> or possibly null 
            if <typeparamref name="TResult"/> a reference type.</returns>
        </member>
        <member name="M:LightMock.MockContext`1.LightMock#IInvocationContext{TMock}#InvokeSetter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Tracks that the setter represented by the <paramref name="expression"/>
            has been invoked.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression`1"/> that 
            represents the setter that has been invoked.</param>
            <param name="value">The value</param>
        </member>
        <member name="T:LightMock.PropertyArrangement`1">
            <summary>
            A class that represents an arrangement of a mocked property that 
            returns a value of type <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The type of the return value of the mocked property.</typeparam>
        </member>
        <member name="M:LightMock.PropertyArrangement`1.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:LightMock.PropertyArrangement`1"/> class.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.LambdaExpression"/> that specifies
            where to apply this <see cref="T:LightMock.Arrangement"/>.</param>
        </member>
        <member name="M:LightMock.PropertyArrangement`1.Execute(System.Object[])">
            <summary>
            Executes the arrangement.
            </summary>
            <param name="arguments">The arguments used to invoke the mocked method.</param>
            <returns>The registered return value, if any, otherwise, the default value.</returns>
        </member>
        <member name="T:LightMock.The`1">
            <summary>
            Specifies an argument match.
            </summary>
            <typeparam name="TValue">The type of the target parameter.</typeparam>
        </member>
        <member name="P:LightMock.The`1.IsAnyValue">
            <summary>
            Specifies that the argument value can be any value of <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="M:LightMock.The`1.Is(System.Func{`0,System.Boolean})">
            <summary>
            Specifies that the argument value must match the given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A <see cref="T:System.Func`2"/> that represents the match predicate.</param>
            <returns>default(<typeparamref name="TValue"/>)</returns>
        </member>
        <member name="T:ExpressionReflect.Evaluator">
            <summary>
            Enables the partial evaluation of queries.
            </summary>
            <remarks>
            From http://msdn.microsoft.com/en-us/library/bb546158.aspx
            </remarks>	
        </member>
        <member name="M:ExpressionReflect.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:ExpressionReflect.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:ExpressionReflect.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="T:ExpressionReflect.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:ExpressionReflect.ExpressionExecutionException">
            <summary>
            Represents an exception that occurs during expression execution.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:ExpressionReflect.ExpressionExecutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressionReflect.ExpressionExecutionException"/> class.
            </summary>
        </member>
        <member name="M:ExpressionReflect.ExpressionExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressionReflect.ExpressionExecutionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ExpressionReflect.ExpressionExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ExpressionReflect.ExpressionExecutionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:ExpressionReflect.ExpressionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
        </member>
        <member name="M:ExpressionReflect.ExpressionExtensions.Execute(System.Linq.Expressions.Expression,System.Object[])">
            <summary>
            Executes the specified values onto the expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="T:ExpressionReflect.ExpressionReflectionExecutor">
            <summary>
            An expression visitor that translates the expression tree to reflection calls.
            </summary>
        </member>
        <member name="M:ExpressionReflect.ExpressionReflectionExecutor.Execute(System.Object[],System.Boolean)">
            <summary>
            The entry point for the evaluation.
            </summary>
            <param name="passedArgumentValues">The passed argument values.</param>
            <param name="returnsValue">Flag, indicating if the expression returns a value. The default is <c>true</c>.</param>
            <returns>The result of the expression.</returns>
        </member>
        <member name="M:ExpressionReflect.ExpressionReflectionExecutor.GetValueFromStack">
            <summary>
            Gets a single value from the stack.
            </summary>
            <returns>The element.</returns>
        </member>
    </members>
</doc>

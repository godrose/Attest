<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Attest.Fake.LightMock</name>
    </assembly>
    <members>
        <member name="T:Attest.Fake.LightMock.ConstraintFactory">
            <summary>
            Represents a factory for creating argument constraints.
            </summary>
            <seealso cref="T:Attest.Fake.Core.IConstraintFactory" />
        </member>
        <member name="M:Attest.Fake.LightMock.ConstraintFactory.IsAny``1">
            <summary>
            Creates a constraint that accepts any argument value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Attest.Fake.LightMock.ConstraintFactory.Matches``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a constraint that accepts only an argument that matches the specified predicate.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Attest.Fake.LightMock.Fake`1">
            <summary>
            Implementation of fake using <see cref="N:Attest.Fake.LightMock"/>
            </summary>
            <typeparam name="TFaked">Type of faked service</typeparam>
        </member>
        <member name="M:Attest.Fake.LightMock.Fake`1.#ctor(`0,LightMock.MockContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.LightMock.Fake`1"/> class.
            </summary>
            <param name="fake">The fake.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Attest.Fake.LightMock.Fake`1.Setup(System.Linq.Expressions.Expression{System.Action{`0}})">
            <inheritdoc />       
        </member>
        <member name="M:Attest.Fake.LightMock.Fake`1.Setup``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />        
        </member>
        <member name="P:Attest.Fake.LightMock.Fake`1.Object">
            <inheritdoc />      
        </member>
        <member name="M:Attest.Fake.LightMock.Fake`1.VerifyCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <inheritdoc />       
        </member>
        <member name="M:Attest.Fake.LightMock.Fake`1.VerifyNoCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <inheritdoc />       
        </member>
        <member name="M:Attest.Fake.LightMock.Fake`1.VerifySingleCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <inheritdoc />       
        </member>
        <member name="M:Attest.Fake.LightMock.Fake`1.Raise(System.Action{`0},System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Attest.Fake.LightMock.LightFakeCallback`1">
            <summary>
            Implementation of fake callback without return value using LightMock framework
            </summary>
            <typeparam name="TFake">Type of faked service</typeparam>
        </member>
        <member name="T:Attest.Fake.LightMock.LightFakeCallbackWithResult`2">
            <summary>
            Implementation of fake callback with return value using Moq framework
            </summary>
            <typeparam name="TFake">Type of faked service</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="T:Attest.Fake.LightMock.FakeFactoryHelper">
            <summary>
            Helper class for creating fake instances.
            </summary>
        </member>
        <member name="M:Attest.Fake.LightMock.FakeFactoryHelper.CreateFake``1(System.Func{LightMock.IInvocationContext{``0},``0})">
            <summary>
            Creates the fake using the specified proxy creator method.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="proxyCreator">The proxy creator method.</param>
            <returns>Fake instance.</returns>
        </member>
        <member name="T:Attest.Fake.LightMock.It">
            <summary>
            Wrapper class for specifying value constraints.
            </summary>
        </member>
        <member name="M:Attest.Fake.LightMock.It.IsAny``1">
            <summary>
            Matches any value of the given type
            </summary>
            <typeparam name="TValue">Type of value to be matched</typeparam>
            <returns>Value match</returns>
        </member>
        <member name="M:Attest.Fake.LightMock.It.Is``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Matches any value that satisifies the given predicate
            </summary>
            <typeparam name="TValue">Type of value to be matched</typeparam>
            <param name="testExpression">Predicate to be satisfied</param>
            <returns>Value match</returns>
        </member>
        <member name="T:Attest.Fake.LightMock.ProviderProxyBase`1">
            <summary>
            Base class for manually created provider proxies.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
        </member>
        <member name="M:Attest.Fake.LightMock.ProviderProxyBase`1.#ctor(LightMock.IInvocationContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.LightMock.ProviderProxyBase`1"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Attest.Fake.LightMock.ProviderProxyBase`1.Invoke(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Invokes the specified method.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Attest.Fake.LightMock.ProviderProxyBase`1.Invoke``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Invokes the specified method.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
    </members>
</doc>

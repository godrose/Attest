<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Attest.Fake.Builders</name>
    </assembly>
    <members>
        <member name="T:Attest.Fake.Builders.BuilderRegistrationExtensions">
            <summary>
            Builder registration extension methods.
            </summary>
        </member>
        <member name="M:Attest.Fake.Builders.BuilderRegistrationExtensions.RegisterBuilders``1(``0,System.Action{``0,System.Type,Solid.Patterns.Builder.IBuilder},System.Collections.Generic.Dictionary{System.Type,System.Type},System.Func{System.Type,System.Object},Solid.Patterns.Builder.IBuilder[])">
            <summary>
            Registers builders for the provided types and custom dependency registrator.
            </summary>
            <typeparam name="TDependencyRegistrator">The type of the dependency registrator.</typeparam>
            <param name="dependencyRegistrator">The dependency registrator.</param>
            <param name="registrationMethod">The builder registration method.</param>
            <param name="contractsToImplementationsMap">The mapping between contracts and their implementations.</param>
            <param name="builderFactory">The builder factory method.</param>
            <param name="builders"></param>
        </member>
        <member name="T:Attest.Fake.Builders.BuildersCollectionFactory">
            <summary>
            This class is responsible for creation/patching of builders collection.
            </summary>
        </member>
        <member name="M:Attest.Fake.Builders.BuildersCollectionFactory.PatchBuilders(System.Collections.Generic.IEnumerable{Solid.Patterns.Builder.IBuilder},System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Object})">
            <summary>
            Patches the provided builders collection by filling the missing instances.
            </summary>
            <param name="builders">The original builders collection.</param>
            <param name="buildersTypes">The list of required builders' types.</param>
            <param name="builderFactory">The builder factory.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Builders.FakeBuilderBase`1">
            <summary>
            Base class for service builders, supporting mock and fake capabilities.
            </summary>
            <typeparam name="TService">The type of the service</typeparam>    
        </member>
        <member name="M:Attest.Fake.Builders.FakeBuilderBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Builders.FakeBuilderBase`1"/> class.
            </summary>
        </member>
        <member name="M:Attest.Fake.Builders.FakeBuilderBase`1.#ctor(Attest.Fake.Core.IFake{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Builders.FakeBuilderBase`1"/> class
            using the specified fake instance.
            </summary>
            <param name="fakeService">The instance of the fake service.</param>
        </member>
        <member name="P:Attest.Fake.Builders.FakeBuilderBase`1.FakeService">
            <summary>
            Fake service.
            </summary>                    
        </member>
        <member name="M:Attest.Fake.Builders.FakeBuilderBase`1.SetupFake">
            <summary>
            Override this method to substitute method calls in the faked service.
            </summary>
        </member>
        <member name="M:Attest.Fake.Builders.FakeBuilderBase`1.VerifyCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Verifies that the method on the fake was called.
            </summary>
            <param name="expression">Method definition.</param>
        </member>
        <member name="M:Attest.Fake.Builders.FakeBuilderBase`1.VerifyNoCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Verifies that the method on the fake was not called.
            </summary>
            <param name="expression">Method definition.</param>
        </member>
        <member name="M:Attest.Fake.Builders.FakeBuilderBase`1.VerifySingleCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Verifies that the method on the fake was called exactly once.
            </summary>
            <param name="expression">Method definition.</param>
        </member>
        <member name="P:Attest.Fake.Builders.FakeBuilderBase`1.Object">
            <inheritdoc />
        </member>
        <member name="T:Attest.Fake.Builders.FakeBuilderBase`1.WithInitialSetup">
            <summary>
            Base class for service builders, supporting mock and fake capabilities.
            This class supports basic initial setup.
            This is the recommended way of using <see cref="T:Attest.Fake.Builders.FakeBuilderBase`1"/>
            </summary>
        </member>
        <member name="M:Attest.Fake.Builders.FakeBuilderBase`1.WithInitialSetup.SetupFake">
            <inheritdoc />           
        </member>
        <member name="M:Attest.Fake.Builders.FakeBuilderBase`1.WithInitialSetup.CreateInitialSetup">
            <summary>
            Creates initial template for the fake setup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Builders.FakeBuilderBase`1.WithInitialSetup.CreateServiceCall(Attest.Fake.Setup.Contracts.IHaveNoMethods{`0})">
            <summary>
            Override this method to create service call from the provided template.
            </summary>
            <param name="serviceCallTemplate">The service call template.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Builders.FakeProviderBase`2">
            <summary>
            Base class for fake data/model providers.
            </summary>
            <typeparam name="TBuilder">Type of builder</typeparam>
            <typeparam name="TService">Type of service</typeparam>
        </member>
        <member name="M:Attest.Fake.Builders.FakeProviderBase`2.#ctor">
            <summary>
            Create an instance of the <see cref="T:Attest.Fake.Builders.FakeProviderBase`2"/>
            </summary>
        </member>
        <member name="M:Attest.Fake.Builders.FakeProviderBase`2.#ctor(`0)">
            <summary>
            Create an instance of the <see cref="T:Attest.Fake.Builders.FakeProviderBase`2"/> 
            using provided builder instance.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Attest.Fake.Builders.FakeProviderBase`2.GetService(System.Func{`0},System.Func{`0,`0})">
            <summary>
            Gets an instance of the faked service, after the builder setup is applied.
            </summary>
            <param name="createBuilder">Builder instantiation function</param>
            <param name="setupBuilder">Builder setup function</param>
            <returns>Instance of service after the setup is applied</returns>
        </member>
        <member name="M:Attest.Fake.Builders.FakeProviderBase`2.GetService(System.Func{`0,`0})">
            <summary>
            Gets an instance of the faked service, after the builder setup is applied.
            </summary>
            <param name="setupBuilder">Builder setup function</param>
            <returns>Instance of service after the setup is applied</returns>
        </member>
        <member name="M:Attest.Fake.Builders.FakeProviderBase`2.GetService">
            <summary>
            Gets an instance of the faked service.
            </summary>        
            <returns>Instance of service</returns>
        </member>
    </members>
</doc>

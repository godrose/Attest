<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Attest.Fake.Setup.Contracts</name>
    </assembly>
    <members>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallbackShared`1">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container.
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallback`1">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`1.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>An object that allows to add callbacks to the callbacks container.</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`1.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`1.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`1.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`1.Complete(System.Action)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallback`2">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`2.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>An object that allows to add callbacks to the callbacks container.</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`2.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`2.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`2.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`2.Complete(System.Action{`1})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallback`3">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>    
            <typeparam name="T2">The type of the second parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`3.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>An object that allows to add callbacks to the callbacks container.</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`3.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`3.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`3.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`3.Complete(System.Action{`1,`2})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallback`4">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>    
            <typeparam name="T2">The type of the second parameter.</typeparam>    
            <typeparam name="T3">The type of the third parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`4.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>An object that allows to add callbacks to the callbacks container.</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`4.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`4.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`4.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`4.Complete(System.Action{`1,`2,`3})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallback`5">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>    
            <typeparam name="T2">The type of the second parameter.</typeparam>    
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`5.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>An object that allows to add callbacks to the callbacks container.</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`5.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`5.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`5.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`5.Complete(System.Action{`1,`2,`3,`4})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallback`6">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>    
            <typeparam name="T2">The type of the second parameter.</typeparam>    
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>    
            <typeparam name="T5">The type of the fifth parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`6.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>An object that allows to add callbacks to the callbacks container.</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`6.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`6.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`6.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallback`6.Complete(System.Action{`1,`2,`3,`4,`5})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallbackWithResultShared`1">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`2">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`2.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`2.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`2.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`2.Complete(`1)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`2.Complete(System.Func{`1})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`3">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T">Type of first parameter</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`3.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`3.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`3.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`3.Complete(`2)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`3.Complete(System.Func{`1,`2})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`4">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`4.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`4.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`4.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`4.Complete(`3)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`4.Complete(System.Func{`1,`2,`3})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`5">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`5.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`5.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`5.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`5.Complete(`4)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`5.Complete(System.Func{`1,`2,`3,`4})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`6">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>    
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`6.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`6.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`6.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`6.Complete(`5)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`6.Complete(System.Func{`1,`2,`3,`4,`5})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`7">
            <summary>
            Represents an object that allows to add callbacks to the callbacks container
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
            <typeparam name="T5">Type of fifth parameter</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`7.AddCallback(`0)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`7.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`7.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`7.Complete(`6)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAddCallbackWithResult`7.Complete(System.Func{`1,`2,`3,`4,`5,`6})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAppendCallbacks`1">
            <summary>
            Provides ability to append collection of callbacks
            </summary>
            <typeparam name="TCallback"></typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAppendCallbacks`1.AppendCallbacks(Attest.Fake.Setup.Contracts.IHaveCallbacks{`0})">
            <summary>
            Appends the callbacks.
            </summary>
            <param name="haveCallbacks">An object that has callbacks.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.ICallbackYielder`1">
            <summary>
            Yields the next callback
            </summary>
            <typeparam name="TCallback"></typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICallbackYielder`1.YieldCallback">
            <summary>
            Call this method to yield the next callback from the collection of callbacks.
            </summary>
            <returns>Next callback.</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackConditionChecker">
            <summary>
            Represents an object that can check whether the method callbacks can be generated.
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackConditionChecker.CanGenerateCallback">
            <summary>
            Trus, if the method callback can be generated, false otherwise.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`1">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`1.GenerateCallback(`0)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg">The parameter.</param>        
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`2">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`2.GenerateCallback(`0,`1)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>       
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`3">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`3.GenerateCallback(`0,`1,`2)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`4">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`4.GenerateCallback(`0,`1,`2,`3)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`5">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallback`5.GenerateCallback(`0,`1,`2,`3,`4)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`1">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`1.GenerateCallback(`0)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg">The parameter.</param>        
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`2">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`2.GenerateCallback(`0,`1)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>       
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`3">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`3.GenerateCallback(`0,`1,`2)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`4">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`4.GenerateCallback(`0,`1,`2,`3)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`5">
            <summary>
            Generates method callback by evaluating provided parameters.
            This contract is internal and is not meant to be used from the code.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IGenerateMethodCallbackWithResult`5.GenerateCallback(`0,`1,`2,`3,`4)">
            <summary>
            Generates callback.
            </summary>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveCallbacks`1">
            <summary>
            Represents collection of callbacks.
            </summary>
            <typeparam name="TCallback"></typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IHaveCallbacks`1.Callbacks">
            <summary>
            Collection of callbacks.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacks`1">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">The type of the method callback.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacks`2">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>    
            <typeparam name="T">Type of parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacks`3">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacks`4">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacks`5">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>    
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacks`6">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult`2">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>
            <typeparam name="TResult">Type of return value.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult`3">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T">Type of parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult`4">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult`5">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult`6">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult`7">
            <summary>
            Represents a callbacks container without method callbacks.
            </summary>
            <typeparam name="TCallback">Type of method callback.</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
            <typeparam name="T5">Type of fifth parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveProgressMessages">
            <summary>
            Represents an object that contains progress messages.
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IHaveProgressMessages.ProgressMessages">
            <summary>
            Gets the progress messages.
            </summary>
            <value>
            The progress messages.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbacksContainer`1">
            <summary>
            Represents an object that allows to manage and retrieve callbacks for the given callback type.
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallMetaData">
            <summary>
            Represents method description, storing the callback type.
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IMethodCallMetaData.RunMethodDescription">
            <summary>
            Gets the run method description.
            </summary>
            <value>
            The run method description.
            </value>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IMethodCallMetaData.CallbackType">
            <summary>
            Gets the type of the callback.
            </summary>
            <value>
            The type of the callback.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IOperation">
            <summary>
            Represents a long-running operation
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IOperation.WithMethod(System.Action)">
            <summary>
            Sets the method that is executed when the operation starts to run.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IOperation.WithCancel(System.Action)">
            <summary>
            Sets the method that is executed when the operation is cancelled.
            </summary>
            <param name="onCancel">The on cancel.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IOperation.WithProgress(System.Action{System.Object})">
            <summary>
            Sets the method that is executed when the operation yields a progress message.
            </summary>
            <param name="onProgress">The on progress.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IOperation.WithError(System.Action{System.Exception})">
            <summary>
            Sets the method that is executed when the operation throws an exception.
            </summary>
            <param name="onError">The on error.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IOperation.Start">
            <summary>
            Starts the operation.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IOperation.Cancel">
            <summary>
            Cancels the operation.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IOperation`1">
            <summary>
            Represents long-running operation associated with a method call on the service
            </summary>
            <typeparam name="TService">Type of service</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IOperation`1.Service">
            <summary>
            Gets the service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IOperationFactory">
            <summary>
            The operation factory.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IOperationFactory.CreateOperation``1">
            <summary>
            Creates the operation.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IReturnResult`1">
            <summary>
            Represents an object that has return value
            </summary>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IReturnResult`1.Result">
            <summary>
            The return value
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IThrowException">
            <summary>
            Represents an object that throws exception
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IThrowException.Exception">
            <summary>
            Exception to be thrown
            </summary>
        </member>
    </members>
</doc>

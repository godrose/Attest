<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Attest.Fake.Setup</name>
    </assembly>
    <members>
        <member name="T:Attest.Fake.Setup.ActionWrapper">
            <summary>
            Wraps an action that has 0 parameters
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper"/> class.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ActionWrapper.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper.Accept(Attest.Fake.Setup.Contracts.IActionWrapperVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ActionWrapper`1">
            <summary>
            Wraps an action that has one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IActionWrapper`1" />
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`1"/> class.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ActionWrapper`1.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`1.Accept(Attest.Fake.Setup.Contracts.IActionWrapperVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ActionWrapper`2">
            <summary>
            Wraps an action that has two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IActionWrapper`2" />
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`2"/> class.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`2.#ctor(System.Action{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`2"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ActionWrapper`2.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`2.Accept(Attest.Fake.Setup.Contracts.IActionWrapperVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ActionWrapper`3">
            <summary>
            Wraps an action that has three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IActionWrapper`3" />
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`3"/> class.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`3.#ctor(System.Action{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`3"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ActionWrapper`3.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`3.Accept(Attest.Fake.Setup.Contracts.IActionWrapperVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ActionWrapper`4">
            <summary>
            Wraps an action that has four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IActionWrapper`4" />
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`4"/> class.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`4.#ctor(System.Action{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`4"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ActionWrapper`4.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`4.Accept(Attest.Fake.Setup.Contracts.IActionWrapperVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ActionWrapper`5">
            <summary>
            Wraps an action that has five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IActionWrapper`5" />
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`5.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`5"/> class.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`5.#ctor(System.Action{`0,`1,`2,`3,`4})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ActionWrapper`5"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ActionWrapper`5.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ActionWrapper`5.Accept(Attest.Fake.Setup.Contracts.IActionWrapperVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.CallbackBuilder`3">
            <summary>
            Callback builder for creating different types of callbacks to the wrapped action
            </summary>
            <typeparam name="TActionWrapper">Type of action wrapper</typeparam>
            <typeparam name="TCallbackTemplate">Type of callback template</typeparam>
            <typeparam name="TCallback">Type of callback</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.CallbackBuilder`3.CreateCallbackBuilder">
            <summary>
            Creates instance of callback builder
            </summary>
            <returns>Callback builder instance</returns>
        </member>
        <member name="M:Attest.Fake.Setup.CallbackBuilder`3.WithDefaultAction">
            <summary>
            Sets the action wrapper to the default action wrapper
            and builds the callback
            </summary>
            <returns>Callback after the setup</returns>
        </member>
        <member name="M:Attest.Fake.Setup.CallbackBuilder`3.Build">
            <summary>
            Builds the callback.
            </summary>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">Action Wrapper can't be null</exception>
        </member>
        <member name="M:Attest.Fake.Setup.CallbackBuilder`3.AsComplete">
            <summary>
            Sets the type of callback to a successful completion
            </summary>
            <returns>Callback builder configured to return successful completion callback</returns>
        </member>
        <member name="M:Attest.Fake.Setup.CallbackBuilder`3.AsError">
            <summary>
            Sets the type of callback to throwing exception
            </summary>
            <returns>Callback builder configured to return exception-throwing callback</returns>
        </member>
        <member name="M:Attest.Fake.Setup.CallbackBuilder`3.AsCancel">
            <summary>
            Sets the type of callback to operation cancellation
            </summary>
            <returns>Callback builder configured to return operation cancellation callback</returns>
        </member>
        <member name="M:Attest.Fake.Setup.CallbackBuilder`3.BuildCallback">
            <summary>
            Builds new callback according to the current setup
            </summary>
            <returns>Instance of callback</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IActionWrapper">
            <summary>
            Wraps an action that has 0 parameters
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IActionWrapper.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IActionWrapper`1">
            <summary>
            Wraps an action that has one parameter
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IActionWrapper`1.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IActionWrapper`2">
            <summary>
            Wraps an action that has two parameters
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IActionWrapper`2.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IActionWrapper`3">
            <summary>
            Wraps an action that has three parameters
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IActionWrapper`3.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IActionWrapper`4">
            <summary>
            Wraps an action that has four parameters
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IActionWrapper`4.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IActionWrapper`5">
            <summary>
            Wraps an action that has five parameters
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IActionWrapper`5.Action">
            <summary>
            Gets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IActionWrapperVisitor">
            <summary>
            Visitor for all action wrappers
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IActionWrapperVisitor.Visit(Attest.Fake.Setup.Contracts.IActionWrapper)">
            <summary>
            Visits the specified action wrapper resulting in method callback template.
            </summary>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IActionWrapperVisitor.Visit``1(Attest.Fake.Setup.Contracts.IActionWrapper{``0})">
            <summary>
            Visits the specified action wrapper resulting in method callback template.
            </summary>
            <typeparam name="T">The type of action's parameter.</typeparam>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IActionWrapperVisitor.Visit``2(Attest.Fake.Setup.Contracts.IActionWrapper{``0,``1})">
            <summary>
            Visits the specified action wrapper resulting in method callback template.
            </summary>
            <typeparam name="T1">The type of the action's first parameter.</typeparam>
            <typeparam name="T2">The type of the action's second parameter.</typeparam>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IActionWrapperVisitor.Visit``3(Attest.Fake.Setup.Contracts.IActionWrapper{``0,``1,``2})">
            <summary>
            Visits the specified action wrapper resulting in method callback template.
            </summary>
            <typeparam name="T1">The type of the action's first parameter.</typeparam>
            <typeparam name="T2">The type of the action's second parameter.</typeparam>
            <typeparam name="T3">The type of the action's third parameter.</typeparam>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IActionWrapperVisitor.Visit``4(Attest.Fake.Setup.Contracts.IActionWrapper{``0,``1,``2,``3})">
            <summary>
            Visits the specified action wrapper resulting in method callback template.
            </summary>
            <typeparam name="T1">The type of the action's first parameter.</typeparam>
            <typeparam name="T2">The type of the action's second parameter.</typeparam>
            <typeparam name="T3">The type of the action's third parameter.</typeparam>
            <typeparam name="T4">The type of the action's fourth parameter.</typeparam>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IActionWrapperVisitor.Visit``5(Attest.Fake.Setup.Contracts.IActionWrapper{``0,``1,``2,``3,``4})">
            <summary>
            Visits the specified action wrapper resulting in method callback template.
            </summary>
            <typeparam name="T1">The type of the action's first parameter.</typeparam>
            <typeparam name="T2">The type of the action's second parameter.</typeparam>
            <typeparam name="T3">The type of the action's third parameter.</typeparam>
            <typeparam name="T4">The type of the action's fourth parameter.</typeparam>
            <typeparam name="T5">The type of the action's fifth parameter.</typeparam>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IAppendMethods`1">
            <summary>
            Used to append collection of method calls to the existing service call.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IAppendMethods`1.AppendMethods(Attest.Fake.Setup.Contracts.IHaveMethods{`0})">
            <summary>
            Appends the method calls.
            </summary>
            <param name="otherMethods">The other methods.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.ICanAddMethods`1">
            <summary>
            Used to add new method calls to the existing service call
            </summary>
            <typeparam name="TService">Type of service</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethods`1.AddMethodCall``1(Attest.Fake.Setup.Contracts.IMethodCall{`0,``0})">
            <summary>
            Adds a new method call without return value.
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <param name="methodCall">Method call</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethods`1.AddMethodCallAsync``1(Attest.Fake.Setup.Contracts.IMethodCallAsync{`0,``0})">
            <summary>
            Adds a new async method call without return value.
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <param name="methodCall">Method call</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethods`1.AddMethodCallWithResult``2(Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0,``0,``1})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
            <param name="methodCall">Method call</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethods`1.AddMethodCallWithResultAsync``2(Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0,``0,``1})">
            <summary>
            Adds a new async method call with return value.
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
            <param name="methodCall">Method call</param>
            <returns>Service call</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1">
            <summary>
            Used to add new method calls to the existing service call using explicit lambda expression API
            </summary>
            <typeparam name="TService">Type of service</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``1(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0},``0},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``1(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0},``0},``0,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``2(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1},``0,``1},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``2(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1},``0,``1},``0,``1,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``3(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2},``0,``1,``2},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``3(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2},``0,``1,``2},``0,``1,``2,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``4(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3},``0,``1,``2,``3},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``4(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3},``0,``1,``2,``3},``0,``1,``2,``3,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``5(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCall``5(System.Linq.Expressions.Expression{System.Action{`0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0},``0},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0}}})">
            <summary>
            Adds a new method call with return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``2(System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1},``0,``1},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``2(System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1},``0,``1},``0,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``3(System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2},``0,``1,``2},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``3(System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2},``0,``1,``2},``0,``1,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``4(System.Linq.Expressions.Expression{System.Func{`0,``3}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3},``0,``1,``2,``3},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``4(System.Linq.Expressions.Expression{System.Func{`0,``3}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3},``0,``1,``2,``3},``0,``1,``2,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``5(System.Linq.Expressions.Expression{System.Func{`0,``4}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``5(System.Linq.Expressions.Expression{System.Func{`0,``4}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4},``0,``1,``2,``3,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``6(System.Linq.Expressions.Expression{System.Func{`0,``5}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsEx`1.AddMethodCallWithResult``6(System.Linq.Expressions.Expression{System.Func{`0,``5}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1">
            <summary>
            Used to add new async method calls to the existing service call
            </summary>
            <typeparam name="TService">Type of service</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback}})">
            <summary>
            Adds a new async method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0},``0},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0}}})">
            <summary>
            Adds a new async method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0},``0},``0,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0}}})">
            <summary>
            Adds a new async method call without return value and one parameter.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1},``0,``1},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1}}})">
            <summary>
            Adds a new async method call without return value and two parameters.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1},``0,``1},``0,``1,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1}}})">
            <summary>
            Adds a new async method call without return value and two parameters.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``3(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2},``0,``1,``2},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``3(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2},``0,``1,``2},``0,``1,``2,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``4(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3},``0,``1,``2,``3},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``4(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3},``0,``1,``2,``3},``0,``1,``2,``3,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``5(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallAsync``5(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4},``0,``1,``2,``3,``4,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4}}})">
            <summary>
            Adds a new method call without return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0},``0},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0}}})">
            <summary>
            Adds a new method call with return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1},``0,``1},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1}}})">
            <summary>
            Adds a new async method call with return value.
            </summary>        
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>        
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1},``0,``1},``0,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1}}})">
            <summary>
            Adds a new async method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``3(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``2}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2},``0,``1,``2},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2}}})">
            <summary>
            Adds a new async method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``3(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``2}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2},``0,``1,``2},``0,``1,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2}}})">
            <summary>
            Adds a new async method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``4(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``3}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3},``0,``1,``2,``3},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3}}})">
            <summary>
            Adds a new async method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``4(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``3}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3},``0,``1,``2,``3},``0,``1,``2,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3}}})">
            <summary>
            Adds a new async method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``5(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``4}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4}}})">
            <summary>
            Adds a new async method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``5(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``4}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4},``0,``1,``2,``3,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4}}})">
            <summary>
            Adds a new async method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``6(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``5}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.ICanAddMethodsAsync`1.AddMethodCallWithResultAsync``6(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``5}}},System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5}}})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <param name="runMethod">The method to be set up.</param>
            <param name="callbacksProducer">The callbacks producer function.</param>
            <returns>Service call</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveMethods`1">
            <summary>
            Represents a method calls container.
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IHaveMethods`1.MethodCalls">
            <summary>
            Collection of method calls.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IHaveNoMethods`1">
            <summary>
            Represents a service call which has no method calls yet.
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCall`1">
            <summary>
            Represents method call without return value.
            </summary>
            <typeparam name="TService">Type of service.</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IMethodCall`1.RunMethod">
            <summary>
            Method to be called.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCall`2">
            <summary>
            Represents method call without return value and specific callback.
            </summary>
            <typeparam name="TService">Type of service.</typeparam>
            <typeparam name="TCallback">Type of callback.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallAsync`1">
            <summary>
            Represents async method call without return value.
            </summary>
            <typeparam name="TService">Type of service.</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IMethodCallAsync`1.RunMethod">
            <summary>
            Method to be called.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallAsync`2">
            <summary>
            Represents async method call without return value and specific callback.
            </summary>
            <typeparam name="TService">Type of service.</typeparam>
            <typeparam name="TCallback">Type of callback.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallback">
            <summary>
            Represents callback without return value and no parameters
            </summary>    
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallback`1">
            <summary>
            Represents callback without return value and one parameter
            </summary>
            <typeparam name="T">Type of parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallback`2">
            <summary>
            Represents callback without return value and two parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallback`3">
            <summary>
            Represents callback without return value and three parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallback`4">
            <summary>
            Represents callback without return value and four parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallback`5">
            <summary>
            Represents callback without return value and five parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>    
            <typeparam name="T5">Type of fifth parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackTemplateShared`1">
            <summary>
            Represents method callback template with action wrapper.
            </summary>
            <typeparam name="TActionWrapper">The type of the action wrapper.</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IMethodCallbackTemplateShared`1.ActionWrapper">
            <summary>
            Gets the action wrapper.
            </summary>
            <value>
            The action wrapper.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackTemplate`1">
            <summary>
            Represents method callback template without return value and no parameters
            </summary>
            <typeparam name="TActionWrapper">Type of the action wrapper.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackTemplate`2">
            <summary>
            Represents method callback template without return value and one parameter.
            </summary>
            <typeparam name="T">Type of parameter</typeparam>
            <typeparam name="TActionWrapper">Type of the action wrapper.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackTemplate`3">
            <summary>
            Represents method callback template without return value and two parameters.
            </summary>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TActionWrapper">Type of the action wrapper.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackTemplate`4">
            <summary>
            Represents method callback template without return value and three parameters.
            </summary>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TActionWrapper">Type of the action wrapper.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackTemplate`5">
            <summary>
            Represents method callback template without return value and four parameters.
            </summary>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>    
            <typeparam name="TActionWrapper">Type of the action wrapper.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackTemplate`6">
            <summary>
            Represents method callback template without return value and five parameters.
            </summary>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>    
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TActionWrapper">Type of the action wrapper.</typeparam>    
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor">
            <summary>
            Represents visitor for different method callback templates without return value
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor.Visit(Attest.Fake.Setup.Contracts.IMethodCallbackTemplate{Attest.Fake.Setup.Contracts.IActionWrapper})">
            <summary>
            Visits the specified method callback template.
            </summary>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor.Visit``1(Attest.Fake.Setup.Contracts.IMethodCallbackTemplate{Attest.Fake.Setup.Contracts.IActionWrapper{``0},``0})">
            <summary>
            Visits the specified method callback template.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor.Visit``2(Attest.Fake.Setup.Contracts.IMethodCallbackTemplate{Attest.Fake.Setup.Contracts.IActionWrapper{``0,``1},``0,``1})">
            <summary>
            Visits the specified method callback template.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor.Visit``3(Attest.Fake.Setup.Contracts.IMethodCallbackTemplate{Attest.Fake.Setup.Contracts.IActionWrapper{``0,``1,``2},``0,``1,``2})">
            <summary>
            Visits the specified method callback template.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor.Visit``4(Attest.Fake.Setup.Contracts.IMethodCallbackTemplate{Attest.Fake.Setup.Contracts.IActionWrapper{``0,``1,``2,``3},``0,``1,``2,``3})">
            <summary>
            Visits the specified method callback template.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor.Visit``5(Attest.Fake.Setup.Contracts.IMethodCallbackTemplate{Attest.Fake.Setup.Contracts.IActionWrapper{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4})">
            <summary>
            Visits the specified method callback template.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor">
            <summary>
            Represents visitor for different callbacks without return value and no parameters.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor.Visit(Attest.Fake.Setup.OnErrorCallback)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor.Visit(Attest.Fake.Setup.OnCompleteCallback)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor.Visit(Attest.Fake.Setup.ProgressCallback)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor.Visit(Attest.Fake.Setup.OnCancelCallback)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor.Visit(Attest.Fake.Setup.OnWithoutCallback)">
            <summary>
            Visits never-ending callback.
            </summary>
            <param name="withoutCallback">Callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`1">
            <summary>
            Represents visitor for different callbacks without return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`1.Visit(Attest.Fake.Setup.OnErrorCallback{`0},`0)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg">Parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`1.Visit(Attest.Fake.Setup.OnCompleteCallback{`0},`0)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg">Parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`1.Visit(Attest.Fake.Setup.ProgressCallback{`0},`0)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`1.Visit(Attest.Fake.Setup.OnCancelCallback{`0},`0)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`1.Visit(Attest.Fake.Setup.OnWithoutCallback{`0},`0)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`2">
            <summary>
            Represents visitor for different callbacks without return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`2.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1},`0,`1)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`2.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1},`0,`1)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`2.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1},`0,`1)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`2.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1},`0,`1)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`2.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1},`0,`1)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`3">
            <summary>
            Represents visitor for different callbacks without return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`3.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`3.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`3.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`3.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`3.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`4">
            <summary>
            Represents visitor for different callbacks without return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`4.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`4.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`4.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`4.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`4.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`5">
            <summary>
            Represents visitor for different callbacks without return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`5.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`5.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`5.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`5.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitor`5.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync">
            <summary>
            Represents visitor for different async callbacks without return value and no parameters.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.OnErrorCallback)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.OnCompleteCallback)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.ProgressCallback)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.OnCancelCallback)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.OnWithoutCallback)">
            <summary>
            Visits never-ending callback.
            </summary>
            <param name="withoutCallback">Callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`1">
            <summary>
            Represents visitor for different async callbacks without return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.OnErrorCallback{`0},`0)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg">Parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.OnCompleteCallback{`0},`0)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg">Parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.ProgressCallback{`0},`0)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.OnCancelCallback{`0},`0)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.OnWithoutCallback{`0},`0)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`2">
            <summary>
            Represents visitor for different async callbacks without return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1},`0,`1)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1},`0,`1)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1},`0,`1)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1},`0,`1)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1},`0,`1)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`3">
            <summary>
            Represents visitor for different async callbacks without return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`4">
            <summary>
            Represents visitor for different async callbacks without return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`5">
            <summary>
            Represents visitor for different async callbacks without return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResult`1">
            <summary>
            Represents callback with return value and no parameters
            </summary>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResult`2">
            <summary>
            Represents callback with return value and one parameter
            </summary>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T">Type of parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResult`3">
            <summary>
            Represents callback with return value and two parameters
            </summary>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResult`4">
            <summary>
            Represents callback with return value and three parameters
            </summary>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResult`5">
            <summary>
            Represents callback with return value and four parameters
            </summary>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResult`6">
            <summary>
            Represents callback with return value and five parameters
            </summary>
            <typeparam name="TResult">Type of return value</typeparam>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
            <typeparam name="T5">Type of fifth parameter</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`1">
            <summary>
            Represents visitor for different callbacks with return value and no parameters
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0})">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0})">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0})">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallbackWithResult">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0})">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0})">
            <summary>
            Visits never-ending callback 
            </summary>
            <param name="withoutCallback">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`2">
            <summary>
            Represents visitor for different callbacks with return value and one parameter.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallbackWithResult">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits never-ending callback 
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`3">
            <summary>
            Represents visitor for different callbacks with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`4">
            <summary>
            Represents visitor for different callbacks with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`5">
            <summary>
            Represents visitor for different callbacks with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`6">
            <summary>
            Represents visitor for different callbacks with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`1">
            <summary>
            Represents visitor for different async callbacks with return value and no parameters
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0})">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0})">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0})">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallbackWithResult">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0})">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0})">
            <summary>
            Visits never-ending callback 
            </summary>
            <param name="withoutCallback">Callback</param>
            <returns>Return value</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`2">
            <summary>
            Represents visitor for different async callbacks with return value and one parameter.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallbackWithResult">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits never-ending callback 
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>Return value</returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`3">
            <summary>
            Represents visitor for different async callbacks with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`4">
            <summary>
            Represents visitor for different async callbacks with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`5">
            <summary>
            Represents visitor for different async callbacks with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`6">
            <summary>
            Represents visitor for different callbacks with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateBase`3">
            <summary>
            Represents an object that allows creating new method call using callbacks mapping function
            </summary>
            <typeparam name="TService">Type of service</typeparam>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="TInitialCallback">Type of the initial callback.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateBase`3.BuildCallbacks(System.Func{`2,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`2">
            <summary>
            Represents initial template for method call with no parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>    
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`3">
            <summary>
            Represents initial template for method call with one parameter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`3.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2},`2,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="callbacksProducer">The build callbacks.</param>        
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`4">
            <summary>
            Represents initial template for method call with two parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`4.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2,`3},`2,`3,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`5">
            <summary>
            Represents initial template for method call with three parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`5.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2,`3,`4},`2,`3,`4,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`6">
            <summary>
            Represents initial template for method call with four parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`6.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2,`3,`4,`5},`2,`3,`4,`5,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`7">
            <summary>
            Represents initial template for method call with five parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplate`7.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2,`3,`4,`5,`6},`2,`3,`4,`5,`6,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateBaseAsync`3">
            <summary>
            Represents an object that allows creating new method call using callbacks mapping function
            </summary>
            <typeparam name="TService">Type of service</typeparam>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="TInitialCallback">Type of the initial callback.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateBaseAsync`3.BuildCallbacks(System.Func{`2,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`2">
            <summary>
            Represents initial template for method call with no parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>    
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`3">
            <summary>
            Represents initial template for async method call with one parameter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`3.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2},`2,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="callbacksProducer">The build callbacks.</param>        
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`4">
            <summary>
            Represents initial template for async method call with two parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`4.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2,`3},`2,`3,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`5">
            <summary>
            Represents initial template for async method call with three parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`5.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2,`3,`4},`2,`3,`4,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`6">
            <summary>
            Represents initial template for async method call with four parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`6.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2,`3,`4,`5},`2,`3,`4,`5,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`7">
            <summary>
            Represents initial template for async method call with five parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallInitialTemplateAsync`7.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{`1,`2,`3,`4,`5,`6},`2,`3,`4,`5,`6,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallVisitor`1">
            <summary>
            Represents visitor for different method calls without return value
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitor`1.Visit(Attest.Fake.Setup.Contracts.IMethodCall{`0,Attest.Fake.Setup.Contracts.IMethodCallback})">
            <summary>
            Visits the specified method call.
            </summary>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitor`1.Visit``1(Attest.Fake.Setup.Contracts.IMethodCall{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0}})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitor`1.Visit``2(Attest.Fake.Setup.Contracts.IMethodCall{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1}})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitor`1.Visit``3(Attest.Fake.Setup.Contracts.IMethodCall{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2}})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitor`1.Visit``4(Attest.Fake.Setup.Contracts.IMethodCall{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3}})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>        
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitor`1.Visit``5(Attest.Fake.Setup.Contracts.IMethodCall{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4}})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>        
            <typeparam name="T5">The type of the fifth parameter.</typeparam>        
            <param name="methodCall">The method call.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync`1">
            <summary>
            Represents visitor for different async method calls without return value
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync`1.Visit(Attest.Fake.Setup.Contracts.IMethodCallAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallback})">
            <summary>
            Visits the specified async method call.
            </summary>
            <param name="methodCall">The async method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync`1.Visit``1(Attest.Fake.Setup.Contracts.IMethodCallAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0}})">
            <summary>
            Visits the specified async method call.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="methodCall">The async method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync`1.Visit``2(Attest.Fake.Setup.Contracts.IMethodCallAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1}})">
            <summary>
            Visits the specified async method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <param name="methodCall">The async method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync`1.Visit``3(Attest.Fake.Setup.Contracts.IMethodCallAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2}})">
            <summary>
            Visits the specified async method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <param name="methodCall">The async method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync`1.Visit``4(Attest.Fake.Setup.Contracts.IMethodCallAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3}})">
            <summary>
            Visits the specified async method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>        
            <param name="methodCall">The async method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync`1.Visit``5(Attest.Fake.Setup.Contracts.IMethodCallAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallback{``0,``1,``2,``3,``4}})">
            <summary>
            Visits the specified async method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>        
            <typeparam name="T5">The type of the fifth parameter.</typeparam>        
            <param name="methodCall">The method call.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResult`1">
            <summary>
            Represents method call with return value
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResult`3">
            <summary>
            Represents method call with return value and specific callback.
            </summary>
            <typeparam name="TService">Type of service</typeparam>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IMethodCallWithResult`3.RunMethod">
            <summary>
            Method to be called.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync`1">
            <summary>
            Represents async method call with return value
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync`3">
            <summary>
            Represents async method call with return value and specific callback.
            </summary>
            <typeparam name="TService">Type of service</typeparam>
            <typeparam name="TCallback">Type of callback</typeparam>
            <typeparam name="TResult">Type of return value</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync`3.RunMethod">
            <summary>
            Method to be called.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateBase`4">
            <summary>
            Represents initial template for method call with return value.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <typeparam name="TInitialCallback">The type of the initial template callback.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateBase`4.BuildCallbacks(System.Func{`3,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`3">
            <summary>
            Represents initial template for method call with return value and no parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`4">
            <summary>
            Represents initial template for method call with return value and one parameter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`4.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3},`2,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`5">
            <summary>
            Represents initial template for method call with return value and two parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`5.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3,`4},`2,`3,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`6">
            <summary>
            Represents initial template for method call with return value and three parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`6.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3,`4,`5},`2,`3,`4,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`7">
            <summary>
            Represents initial template for method call with return value and four parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the fourth parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`7.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3,`4,`5,`6},`2,`3,`4,`5,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`8">
            <summary>
            Represents initial template for method call with return value and five parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the fourth parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplate`8.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3,`4,`5,`6,`7},`2,`3,`4,`5,`6,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateBaseAsync`4">
            <summary>
            Represents initial template for async method call with return value.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <typeparam name="TInitialCallback">The type of the initial template callback.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateBaseAsync`4.BuildCallbacks(System.Func{`3,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the async method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`3">
            <summary>
            Represents initial template for async method call with return value and no parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`4">
            <summary>
            Represents initial template for method call with return value and one parameter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`4.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3},`2,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the async method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`5">
            <summary>
            Represents initial template for async method call with return value and two parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`5.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3,`4},`2,`3,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the async method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`6">
            <summary>
            Represents initial template for async method call with return value and three parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`6.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3,`4,`5},`2,`3,`4,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`7">
            <summary>
            Represents initial template for method call with return value and four parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the fourth parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`7.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3,`4,`5,`6},`2,`3,`4,`5,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`8">
            <summary>
            Represents initial template for method call with return value and five parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the fourth parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultInitialTemplateAsync`8.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{`1,`2,`3,`4,`5,`6,`7},`2,`3,`4,`5,`6,Attest.Fake.Setup.Contracts.IHaveCallbacks{`1}})">
            <summary>
            Builds the method call with return value using specified callbacks producer.
            </summary>
            <param name="callbacksProducer">The callbacks producer.</param>                
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor`1">
            <summary>
            Represents visitor for different method calls with return value
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor`1.Visit``1(Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0},``0})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor`1.Visit``2(Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1},``1})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor`1.Visit``3(Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2},``2})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>       
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor`1.Visit``4(Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3},``3})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>       
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor`1.Visit``5(Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4},``4})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor`1.Visit``6(Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5},``5})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>        
            <typeparam name="T5">The type of the fifth parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync`1">
            <summary>
            Represents visitor for different method calls with return value
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync`1.Visit``1(Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0},``0})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync`1.Visit``2(Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1},``1})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync`1.Visit``3(Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2},``2})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>       
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync`1.Visit``4(Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3},``3})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>       
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync`1.Visit``5(Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4},``4})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync`1.Visit``6(Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync{`0,Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{``0,``1,``2,``3,``4,``5},``5})">
            <summary>
            Visits the specified method call.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>        
            <typeparam name="T5">The type of the fifth parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IResultWrapper`1">
            <summary>
            Wraps a return value
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IResultWrapper`2">
            <summary>
            Wraps a return value with 1 parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>    
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IResultWrapper`3">
            <summary>
            Wraps a return value with 2 parameters
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>    
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IResultWrapperVisitor">
            <summary>
            Visitor for all result wrappers
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IResultWrapperVisitor.Visit``1(Attest.Fake.Setup.Contracts.IResultWrapper{``0})">
            <summary>
            Visits the specified result wrapper resulting in method callback with return value template.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="resultWrapper">The result wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IResultWrapperVisitor.Visit``2(Attest.Fake.Setup.Contracts.IResultWrapper{``0,``1})">
            <summary>
            Visits the specified result wrapper resulting in method callback with return value template.
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="resultWrapper">The result wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IResultWrapperVisitor.Visit``3(Attest.Fake.Setup.Contracts.IResultWrapper{``0,``1,``2})">
            <summary>
            Visits the specified result wrapper resulting in method callback with return value template.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="resultWrapper">The result wrapper.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IServiceCall`1">
            <summary>
            Represents a list of method calls on a specific type of service.
            </summary>
            <typeparam name="TService">Type of service</typeparam>
        </member>
        <member name="T:Attest.Fake.Setup.Contracts.IServiceSetupFactory`1">
            <summary>
            Sets up service fakes 
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IServiceSetupFactory`1.SetupFakeService(Attest.Fake.Core.IFake{`0},System.Collections.Generic.IEnumerable{Attest.Fake.Setup.Contracts.IMethodCallMetaData})">
            <summary>
            Sets up service fake using provided list of method calls
            </summary>
            <param name="fake">Initial fake</param>
            <param name="methodCalls">List of method calls</param>
            <returns>Fake after the setup</returns>
        </member>
        <member name="M:Attest.Fake.Setup.Contracts.IServiceSetupFactory`1.SetupFakeService(Attest.Fake.Core.IFake{`0},System.Collections.Generic.IEnumerable{Attest.Fake.Setup.Contracts.IMethodCall{`0}},System.Collections.Generic.IEnumerable{Attest.Fake.Setup.Contracts.IMethodCallAsync{`0}},System.Collections.Generic.IEnumerable{Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0}},System.Collections.Generic.IEnumerable{Attest.Fake.Setup.Contracts.IMethodCallWithResultAsync{`0}})">
            <summary>
            Sets up service fake using provided list of method calls
            </summary>
            <param name="fake">Initial fake</param>
            <param name="methodCalls">List of method calls without return value</param>
            <param name="methodCallsAsync">List of async method calls without return value</param>
            <param name="methodCallsWithResult">List of method calls with return value</param>
            <param name="methodCallsWithResultAsync">List of async method calls with return value</param>
            <returns>Fake after the setup</returns>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressMessageException">
            <summary>
            This exception is thrown to indicate progress event(s)
            and provide appropriate callback
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressMessageException.#ctor(System.Collections.Generic.IEnumerable{System.Object},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ProgressMessageException"/> class.
            </summary>
            <param name="progressMessages">The progress messages.</param>
            <param name="callbackAction">The callback action.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ProgressMessageException.CallbackAction">
            <summary>
            The callback action.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.CancelCallbackException">
            <summary>
            This exception is thrown to indicate operation cancellation
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.WithoutCallbackException">
            <summary>
            This exception is thrown to indicate operation that never completes
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.FakeOperationBase">
            <summary>
            Base class for fake long-running operations.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.FakeOperation`1">
            <summary>
            Represents fake long-running operation.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IOperation`1" />
        </member>
        <member name="M:Attest.Fake.Setup.FakeOperation`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.FakeOperation`1"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:Attest.Fake.Setup.FakeOperation`1.WithMethod(System.Action)">
            <summary>
            Sets the method that is executed when the operation starts to run.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.FakeOperation`1.WithCancel(System.Action)">
            <inheritdoc />        
        </member>
        <member name="M:Attest.Fake.Setup.FakeOperation`1.WithProgress(System.Action{System.Object})">
            <inheritdoc />        
        </member>
        <member name="M:Attest.Fake.Setup.FakeOperation`1.WithError(System.Action{System.Exception})">
            <inheritdoc />       
        </member>
        <member name="M:Attest.Fake.Setup.FakeOperation`1.Start">
            <inheritdoc />
        </member>
        <member name="M:Attest.Fake.Setup.FakeOperation`1.Cancel">
            <inheritdoc />       
        </member>
        <member name="P:Attest.Fake.Setup.FakeOperation`1.Service">
            <inheritdoc />       
        </member>
        <member name="T:Attest.Fake.Setup.FakeOperationFactory">
            <summary>
            The factory for creating instances of <see cref="T:Attest.Fake.Setup.Contracts.IOperation"/>
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.FakeOperationFactory.RegisterServiceCall``1(Attest.Fake.Setup.Contracts.IServiceCall{``0})">
            <summary>
            Registers the service call.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="serviceCall">The service call.</param>
        </member>
        <member name="M:Attest.Fake.Setup.FakeOperationFactory.CreateOperation``1">
            <inheritdoc />
        </member>
        <member name="T:Attest.Fake.Setup.HaveCallbacksBase`1">
            <summary>
            Base class for all callbacks collections' objects
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
        </member>
        <member name="F:Attest.Fake.Setup.HaveCallbacksBase`1.Callbacks">
            <summary>
            The collection of callbacks.
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.IHaveDelegateWrapper`1">
            <summary>
            Represents an object that contains delegate wrapper.
            </summary>
            <typeparam name="TDelegateWrapper">The type of the delegate wrapper.</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.IHaveDelegateWrapper`1.DelegateWrapper">
            <summary>
            Gets the delegate wrapper.
            </summary>
            <value>
            The delegate wrapper.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.HaveDelegateWrapperBase`1">
            <summary>
            Base class for objects that contain delegate wrappers.
            </summary>
            <typeparam name="TDelegateWrapper">The type of the delegate wrapper.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.IHaveDelegateWrapper`1" />
            <seealso cref="T:Attest.Fake.Setup.IHaveNoDelegateWrapper`1" />
        </member>
        <member name="M:Attest.Fake.Setup.HaveDelegateWrapperBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.HaveDelegateWrapperBase`1"/> class.
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.HaveDelegateWrapperBase`1.DelegateWrapper">
            <summary>
            Gets the delegate wrapper.
            </summary>
            <value>
            The delegate wrapper.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.HaveDelegateWrapperBase`1.SetDelegateWrapper(`0)">
            <summary>
            Sets the delegate wrapper.
            </summary>
            <param name="delegateWrapper">The delegate wrapper.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallBase`2">
            <summary>
            Base class for method calls.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbacksContainerBase`1" />
            <seealso cref="T:Attest.Fake.Setup.Contracts.IMethodCall`2" />    
            <seealso cref="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacks`1" />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallBase`2.#ctor(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.MethodCallBase`2"/> class.
            </summary>
            <param name="runMethod">The run method.</param>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallBase`2.RunMethod">
            <summary>
            Gets the run method.
            </summary>
            <value>
            The run method.
            </value>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallBase`2.RunMethodDescription">
            <summary>
            Gets the run method description.
            </summary>
            <value>
            The run method description.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallBase`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitor{`0})">
            <inheritdoc />
        </member>
        <member name="T:Attest.Fake.Setup.MethodCall`1">
            <summary>
            Represents method call without return value.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`1.CreateMethodCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`1" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`1.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`1.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`1.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`1.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitor{`0})">
            <inheritdoc />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`1.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCall`2">
            <summary>
            Represents method call without return value and one parameter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T">The type of the parameter</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`2.CreateMethodCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`2" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`2.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`2.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`2.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`2.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`2.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1},`1},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`2.Complete(System.Action{`1})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCall`3">
            <summary>
            Represents method call without return value and two parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`3.CreateMethodCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`3" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`3.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`3.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`3.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`3.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`3.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2},`1,`2},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`3.Complete(System.Action{`1,`2})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCall`4">
            <summary>
            Represents method call without return value and three parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`4.CreateMethodCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`4" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`4.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`4.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`4.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`4.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`4.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3},`1,`2,`3},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`4.Complete(System.Action{`1,`2,`3})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCall`5">
            <summary>
            Represents method call without return value and four parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="T4">The type of the fourth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`5.CreateMethodCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`5" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`5.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`5.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`5.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`5.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`5.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4},`1,`2,`3,`4},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`5.Complete(System.Action{`1,`2,`3,`4})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCall`6">
            <summary>
            Represents method call without return value and five parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="T4">The type of the fourth parameter</typeparam>
            <typeparam name="T5">The type of the fifth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`6.CreateMethodCall(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`6" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`6.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4,`5})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`6.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`6.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`6.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`6.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4,`5},`1,`2,`3,`4,`5},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4,`5}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCall`6.Complete(System.Action{`1,`2,`3,`4,`5})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallBaseAsync`2">
            <summary>
            Base class for async method calls.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbacksContainerBase`1" />
            <seealso cref="T:Attest.Fake.Setup.Contracts.IMethodCall`2" />    
            <seealso cref="T:Attest.Fake.Setup.Contracts.IHaveNoCallbacks`1" />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallBaseAsync`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.MethodCallBase`2"/> class.
            </summary>
            <param name="runMethod">The run method.</param>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallBaseAsync`2.RunMethod">
            <summary>
            Gets the run method.
            </summary>
            <value>
            The run method.
            </value>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallBaseAsync`2.RunMethodDescription">
            <summary>
            Gets the run method description.
            </summary>
            <value>
            The run method description.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallBaseAsync`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync{`0})">
            <inheritdoc />
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallAsync`1">
            <summary>
            Represents async method call without return value.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`1.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`1" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`1.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback)">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`1.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`1.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`1.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`1.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallAsync`2">
            <summary>
            Represents async method call without return value and one parameter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T">The type of the parameter</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`2.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`2" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`2.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`2.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`2.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`2.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`2.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1},`1},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`2.Complete(System.Action{`1})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallAsync`3">
            <summary>
            Represents async method call without return value and two parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`3.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`3" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`3.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`3.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`3.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`3.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`3.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2},`1,`2},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`3.Complete(System.Action{`1,`2})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallAsync`4">
            <summary>
            Represents async method call without return value and three parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`4.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`4" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`4.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`4.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`4.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`4.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`4.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3},`1,`2,`3},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`4.Complete(System.Action{`1,`2,`3})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallAsync`5">
            <summary>
            Represents async method call without return value and four parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="T4">The type of the fourth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`5.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`5" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`5.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`5.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`5.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`5.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`5.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4},`1,`2,`3,`4},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`5.Complete(System.Action{`1,`2,`3,`4})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallAsync`6">
            <summary>
            Represents async method call without return value and five parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="T4">The type of the fourth parameter</typeparam>
            <typeparam name="T5">The type of the fifth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`6.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Creates an instance of <see cref="T:Attest.Fake.Setup.MethodCall`6" /> using the specified run method.
            </summary>
            <param name="runMethod">The run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`6.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4,`5})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`6.Complete">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`6.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception"></param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`6.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`6.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4,`5},`1,`2,`3,`4,`5},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallback{`1,`2,`3,`4,`5}}})">
            <summary>
            Builds the method call with specified callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallAsync`6.Complete(System.Action{`1,`2,`3,`4,`5})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="callback">Successful completion callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBase">
            <summary>
            Base class for method callbacks without return value and no parameters.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync)">
            <inheritdoc />
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBase`1">
            <summary>
            Base class for method callbacks without return value and one parameter
            </summary>
            <typeparam name="T">Type of parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBase`2">
            <summary>
            Base class for method callbacks without return value and two parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBase`3">
            <summary>
            Base class for method callbacks without return value and three parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBase`4">
            <summary>
            Base class for method callbacks without return value and four parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBase`5">
            <summary>
            Base class for method callbacks without return value and five parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
            <typeparam name="T5">Type of fifth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBase`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallback">
            <summary>
            Represents successful completion callback without return value and no parameters
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnCompleteCallback.Callback">
            <summary>
            Gets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallback`1">
            <summary>
            Represents successful completion callback without return value and one parameter
            </summary>
            <typeparam name="T">Type of parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallback`1"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnCompleteCallback`1.Callback">
            <summary>
            Gets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg">The argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallback`2">
            <summary>
            Represents successful completion callback without return value and two parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`2.#ctor(System.Action{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallback`2"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnCompleteCallback`2.Callback">
            <summary>
            Gets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallback`3">
            <summary>
            Represents successful completion callback without return value and three parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`3.#ctor(System.Action{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallback`3"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnCompleteCallback`3.Callback">
            <summary>
            Gets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallback`4">
            <summary>
            Represents successful completion callback without return value and four parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`4.#ctor(System.Action{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallback`4"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnCompleteCallback`4.Callback">
            <summary>
            Gets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallback`5">
            <summary>
            Represents successful completion callback without return value and five parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
            <typeparam name="T5">Type of fifth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`5.#ctor(System.Action{`0,`1,`2,`3,`4})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallback`5"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnCompleteCallback`5.Callback">
            <summary>
            Gets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallback">
            <summary>
            Represents exception throwing callback with no parameters
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallback"/> class.
            </summary>        
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallback.Exception">
            <summary>
            Exception to be thrown
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallback`1">
            <summary>
            Represents exception throwing callback with one parameter.
            </summary>
            <typeparam name="T">Type of parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`1.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallback`1"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallback`1.Exception">
            <summary>
            Exception to be thrown
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg">The argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallback`2">
            <summary>
            Represents exception throwing callback with two parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`2.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallback`2"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallback`2.Exception">
            <summary>
            Exception to be thrown
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallback`3">
            <summary>
            Represents exception throwing callback with three parameters.
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`3.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallback`3"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallback`3.Exception">
            <summary>
            Exception to be thrown
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallback`4">
            <summary>
            Represents exception throwing callback with four parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`4.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallback`4"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallback`4.Exception">
            <summary>
            Exception to be thrown
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallback`5">
            <summary>
            Represents exception throwing callback with five parameters
            </summary>
            <typeparam name="T1">Type of first parameter</typeparam>
            <typeparam name="T2">Type of second parameter</typeparam>
            <typeparam name="T3">Type of third parameter</typeparam>
            <typeparam name="T4">Type of fourth parameter</typeparam>
            <typeparam name="T5">Type of fifth parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`5.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallback`5"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallback`5.Exception">
            <summary>
            Exception to be thrown
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallback">
            <summary>
            Represents cancellation callback with no parameters
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallback`1">
            <summary>
            Represents cancellation callback with return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallback`2">
            <summary>
            Represents cancellation callback with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallback`3">
            <summary>
            Represents cancellation callback with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallback`4">
            <summary>
            Represents cancellation callback with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallback`5">
            <summary>
            Represents cancellation callback with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallback">
            <summary>
            Represents never-ending callback without return value.
            </summary>    
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallback`1">
            <summary>
            Represents never-ending callback without return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallback`2">
            <summary>
            Represents never-ending callback without return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>    
            <typeparam name="T2">The type of the second parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallback`3">
            <summary>
            Represents never-ending callback without return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>    
            <typeparam name="T2">The type of the second parameter.</typeparam>    
            <typeparam name="T3">The type of the third parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallback`4">
            <summary>
            Represents never-ending callback without return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>    
            <typeparam name="T2">The type of the second parameter.</typeparam>    
            <typeparam name="T3">The type of the third parameter.</typeparam>    
            <typeparam name="T4">The type of the fourth parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallback`5">
            <summary>
            Represents never-ending callback without return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>    
            <typeparam name="T2">The type of the second parameter.</typeparam>    
            <typeparam name="T3">The type of the third parameter.</typeparam>    
            <typeparam name="T4">The type of the fourth parameter.</typeparam>    
            <typeparam name="T5">The type of the fifth parameter.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallbackBase`1">
            <summary>
            Base class for progress callbacks
            </summary>
            <typeparam name="TCallback">Type of callback</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackBase`1.Complete">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackBase`1.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackBase`1.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackBase`1.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Attest.Fake.Setup.ProgressCallbackBase`1.FinishCallback">
            <summary>
            Gets the finish callback.
            </summary>
            <value>
            The finish callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackBase`1.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallback">
            <summary>
            Represents progress callback
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback.Create">
            <summary>
            Creates new instance of progress message callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback.Complete">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallback`1">
            <summary>
            Represents progress callback with one parameter.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`1.Create">
            <summary>
            Creates new instance of progress message callback with one parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`1.Complete">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`1.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`1.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`1.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`1.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallback`2">
            <summary>
            Represents progress callback with two parameters.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`2.Create">
            <summary>
            Creates new instance of progress message callback with two parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`2.Complete">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`2.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`2.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`2.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`2.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg1">The first argument.</param><param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallback`3">
            <summary>
            Represents progress callback with three parameters.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`3.Create">
            <summary>
            Creates new instance of progress message callback with three parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`3.Complete">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`3.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`3.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`3.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`3.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallback`4">
            <summary>
            Represents progress callback with four parameters.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`4.Create">
            <summary>
            Creates new instance of progress message callback with four parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`4.Complete">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`4.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`4.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`4.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`4.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg1">The first argument.</param><param name="arg2">The second argument.</param><param name="arg3">The third argument.</param><param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallback`5">
            <summary>
            Represents progress callback with five parameters.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`5.Create">
            <summary>
            Creates new instance of progress message callback with five parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`5.Complete">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`5.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`5.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`5.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`5.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallback`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbacksContainerBase`1">
            <summary>
            Base class for callbacks container
            </summary>
            <typeparam name="TCallback"></typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbacksContainerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.MethodCallbacksContainerBase`1"/> class.
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallbacksContainerBase`1.RunMethodDescription">
            <summary>
            Gets the run method description.
            </summary>
            <value>
            The run method description.
            </value>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallbacksContainerBase`1.CallbackType">
            <summary>
            Gets the type of the callback.
            </summary>
            <value>
            The type of the callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbacksContainerBase`1.YieldCallback">
            <summary>
            Call this method to yield the next callback from the collection of callbacks.
            </summary>
            <returns>Next callback</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbacksContainerBase`1.AddCallbackInternal(`0)">
            <summary>
            Adds the callback to the end of the collection.
            </summary>
            <param name="methodCallback">The method callback.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbacksContainerBase`1.AppendCallbacks(Attest.Fake.Setup.Contracts.IHaveCallbacks{`0})">
            <summary>
            Appends the callbacks.
            </summary>
            <param name="haveCallbacks">An object that has callbacks.</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackTemplateBase`1">
            <summary>
            Base class for method callback templates.
            </summary>
            <typeparam name="TActionWrapper">The type of the action wrapper.</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallbackTemplateBase`1.ActionWrapper">
            <summary>
            Gets the action wrapper.
            </summary>
            <value>
            The action wrapper.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackTemplate">
            <summary>
            Represents method callback template without return value and no parameters
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate.SetActionWrapper(Attest.Fake.Setup.Contracts.IActionWrapper)">
            <summary>
            Sets the action wrapper.
            </summary>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackTemplate`1">
            <summary>
            Represents method callback template without return value and one parameter.
            </summary>
            <typeparam name="T">Type of parameter</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`1.SetActionWrapper(Attest.Fake.Setup.Contracts.IActionWrapper{`0})">
            <summary>
            Sets the action wrapper.
            </summary>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackTemplate`2">
            <summary>
            Represents method callback template without return value and two parameters.
            </summary>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`2.SetActionWrapper(Attest.Fake.Setup.Contracts.IActionWrapper{`0,`1})">
            <summary>
            Sets the action wrapper.
            </summary>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackTemplate`3">
            <summary>
            Represents method callback template without return value and three parameters.
            </summary>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`3.SetActionWrapper(Attest.Fake.Setup.Contracts.IActionWrapper{`0,`1,`2})">
            <summary>
            Sets the action wrapper.
            </summary>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackTemplate`4">
            <summary>
            Represents method callback template without return value and four parameters.
            </summary>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`4.SetActionWrapper(Attest.Fake.Setup.Contracts.IActionWrapper{`0,`1,`2,`3})">
            <summary>
            Sets the action wrapper.
            </summary>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackTemplate`5">
            <summary>
            Represents method callback template without return value and five parameters.
            </summary>    
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackTemplateVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackTemplate`5.SetActionWrapper(Attest.Fake.Setup.Contracts.IActionWrapper{`0,`1,`2,`3,`4})">
            <summary>
            Sets the action wrapper.
            </summary>
            <param name="actionWrapper">The action wrapper.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitor">
            <summary>
            Represents visitor for different callbacks without return value and no parameters.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor.Visit(Attest.Fake.Setup.OnErrorCallback)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor.Visit(Attest.Fake.Setup.OnCompleteCallback)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor.Visit(Attest.Fake.Setup.ProgressCallback)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor.Visit(Attest.Fake.Setup.OnCancelCallback)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor.Visit(Attest.Fake.Setup.OnWithoutCallback)">
            <summary>
            Visits never-ending callback.
            </summary>
            <param name="withoutCallback">Callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitor`1">
            <summary>
            Represents visitor for different callbacks without return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`1.Visit(Attest.Fake.Setup.OnErrorCallback{`0},`0)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg">Parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`1.Visit(Attest.Fake.Setup.OnCompleteCallback{`0},`0)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg">Parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`1.Visit(Attest.Fake.Setup.ProgressCallback{`0},`0)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`1.Visit(Attest.Fake.Setup.OnCancelCallback{`0},`0)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`1.Visit(Attest.Fake.Setup.OnWithoutCallback{`0},`0)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitor`2">
            <summary>
            Represents visitor for different callbacks without return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackVisitorHelper" />    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`2.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1},`0,`1)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`2.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1},`0,`1)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`2.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1},`0,`1)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`2.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1},`0,`1)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`2.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1},`0,`1)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitor`3">
            <summary>
            Represents visitor for different callbacks without return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackVisitorHelper" />    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`3.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`3.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`3.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`3.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`3.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitor`4">
            <summary>
            Represents visitor for different callbacks without return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackVisitorHelper" />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`4.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`4.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`4.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`4.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`4.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitor`5">
            <summary>
            Represents visitor for different callbacks without return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackVisitorHelper" />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`5.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`5.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`5.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`5.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitor`5.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitorAsync">
            <summary>
            Represents visitor for different async callbacks without return value and no parameters.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.OnErrorCallback)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.OnCompleteCallback)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.ProgressCallback)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.OnCancelCallback)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync.Visit(Attest.Fake.Setup.OnWithoutCallback)">
            <summary>
            Visits never-ending callback.
            </summary>
            <param name="withoutCallback">Callback</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitorAsync`1">
            <summary>
            Represents visitor for different async callbacks without return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.OnErrorCallback{`0},`0)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg">Parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.OnCompleteCallback{`0},`0)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg">Parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.ProgressCallback{`0},`0)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.OnCancelCallback{`0},`0)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`1.Visit(Attest.Fake.Setup.OnWithoutCallback{`0},`0)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg">Parameter.</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitorAsync`2">
            <summary>
            Represents visitor for different async callbacks without return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackVisitorHelper" />    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1},`0,`1)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1},`0,`1)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1},`0,`1)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1},`0,`1)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`2.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1},`0,`1)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitorAsync`3">
            <summary>
            Represents visitor for different callbacks without return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackVisitorHelper" />    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`3.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2},`0,`1,`2)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitorAsync`4">
            <summary>
            Represents visitor for different async callbacks without return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackVisitorHelper" />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`4.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitorAsync`5">
            <summary>
            Represents visitor for different async callbacks without return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackVisitorHelper" />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.OnErrorCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.OnCompleteCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.ProgressCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback.</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.OnCancelCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackVisitorAsync`5.Visit(Attest.Fake.Setup.OnWithoutCallback{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg1">First parameter</param>
            <param name="arg2">Second parameter</param>
            <param name="arg3">Third parameter</param>
            <param name="arg4">Fourth parameter</param>
            <param name="arg5">Fifth parameter</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitorHelper">
            <summary>
            Helper class for method callback visitors
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackVisitorHelperAsync">
            <summary>
            Helper class for method callback visitors
            </summary>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`1">
            <summary>
            Base class for callback with return value and no parameters
            </summary>
            <typeparam name="TResult">The type of the return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`2">
            <summary>
            Base class for callback with return value and one parameter
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`3">
            <summary>
            Base class for callback with return value and two parameters
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="TResult">The type of the return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`4">
            <summary>
            Base class for callback with return value and three parameters
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="TResult">The type of the return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`5">
            <summary>
            Base class for callback with return value and four parameters
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="T4">The type of the fourth parameter</typeparam>
            <typeparam name="TResult">The type of the return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`6">
            <summary>
            Base class for callback with return value and five parameters
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="T4">The type of the fourth parameter</typeparam>
            <typeparam name="T5">The type of the fifth parameter</typeparam>
            <typeparam name="TResult">The type of the return value</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackBaseWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`1">
            <summary>
            Represents successful completion callback with return value.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`1" />
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`1"/> class.
            </summary>
            <param name="valueFunction">The value function.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`1"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`2">
            <summary>
            Represents successful completion callback with return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`2" />
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`2"/> class.
            </summary>
            <param name="result">The expected return value</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`2"/> class.
            </summary>
            <param name="valueFunction">The return value producer.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`3">
            <summary>
            Represents successful completion callback with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`3" />
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`3.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`3"/> class.
            </summary>
            <param name="result">The expected return value.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`3.#ctor(System.Func{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`3"/> class.
            </summary>
            <param name="valueFunction">The return value producer</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`4">
            <summary>
            Represents successful completion callback with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`4" />
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`4.#ctor(`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`4"/> class.
            </summary>
            <param name="result">The expected return value.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`4.#ctor(System.Func{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`4"/> class.
            </summary>
            <param name="valueFunction">The return value producer function.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`5">
            <summary>
            Represents successful completion callback with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="T4">The type of the fourth parameter</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`5" />
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`5.#ctor(`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`5"/> class.
            </summary>
            <param name="result">The expected return value.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`5.#ctor(System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`5"/> class.
            </summary>
            <param name="valueFunction">The return value producer function.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`6">
            <summary>
            Represents successful completion callback with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter</typeparam>
            <typeparam name="T2">The type of the second parameter</typeparam>
            <typeparam name="T3">The type of the third parameter</typeparam>
            <typeparam name="T4">The type of the fourth parameter</typeparam>
            <typeparam name="T5">The type of the fifth parameter</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`6" />
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`6.#ctor(`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`6"/> class.
            </summary>
            <param name="result">The expected return value.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`6.#ctor(System.Func{`0,`1,`2,`3,`4,`5})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnCompleteCallbackWithResult`6"/> class.
            </summary>
            <param name="valueFunction">The return value producer function.</param>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallbackWithResult`1">
            <summary>
            Represents error-throwing callback with return value.    
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.MethodCallbackBaseWithResult`1" />
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`1.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallbackWithResult`1"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallbackWithResult`1.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallbackWithResult`2">
            <summary>
            Represents error-throwing callback with return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`2.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallbackWithResult`2"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallbackWithResult`2.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallbackWithResult`3">
            <summary>
            Represents error-throwing callback with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`3.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallbackWithResult`3"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallbackWithResult`3.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallbackWithResult`4">
            <summary>
            Represents error-throwing callback with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`4.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallbackWithResult`3"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallbackWithResult`4.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallbackWithResult`5">
            <summary>
            Represents error-throwing callback with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`5.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallbackWithResult`5"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallbackWithResult`5.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnErrorCallbackWithResult`6">
            <summary>
            Represents error-throwing callback with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`6.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.OnErrorCallbackWithResult`6"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Attest.Fake.Setup.OnErrorCallbackWithResult`6.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg1">The first argument.</param><param name="arg2">The second argument.</param><param name="arg3">The third argument.</param><param name="arg4">The fourth argument.</param><param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnErrorCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallbackWithResult`1">
            <summary>
            Represents cancellation callback with return value.
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallbackWithResult`2">
            <summary>
            Represents cancellation callback with return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallbackWithResult`3">
            <summary>
            Represents cancellation callback with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg1">The first argument.</param><param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallbackWithResult`4">
            <summary>
            Represents cancellation callback with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallbackWithResult`5">
            <summary>
            Represents cancellation callback with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnCancelCallbackWithResult`6">
            <summary>
            Represents cancellation callback with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnCancelCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallbackWithResult`1">
            <summary>
            Represents never-ending callback with return value.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallbackWithResult`2">
            <summary>
            Represents never-ending callback with return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallbackWithResult`3">
            <summary>
            Represents never-ending callback with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallbackWithResult`4">
            <summary>
            Represents never-ending callback with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallbackWithResult`5">
            <summary>
            Represents never-ending callback with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.OnWithoutCallbackWithResult`6">
            <summary>
            Represents never-ending callback with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.OnWithoutCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallbackWithResultBase`2">
            <summary>
            Base class for progress message callback with return value.
            </summary>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResultBase`2.Complete(`1)">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResultBase`2.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResultBase`2.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResultBase`2.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Attest.Fake.Setup.ProgressCallbackWithResultBase`2.FinishCallback">
            <summary>
            Gets the finish callback.
            </summary>
            <value>
            The finish callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResultBase`2.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallbackWithResult`1">
            <summary>
            Represent progress message callback with return value.
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`1.Create">
            <summary>
            Creates a new instance of <see cref="T:Attest.Fake.Setup.ProgressCallbackWithResult`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`1.Complete(`0)">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`1.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`1.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`1.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`1.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`1.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallbackWithResult`2">
            <summary>
            Represent progress message callback with return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`2.Create">
            <summary>
            Creates a new instance of <see cref="T:Attest.Fake.Setup.ProgressCallbackWithResult`2"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`2.Complete(`1)">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`2.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`2.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`2.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`2.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1},`0)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg">The argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallbackWithResult`3">
            <summary>
            Represent progress message callback with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`3.Create">
            <summary>
            Creates a new instance of <see cref="T:Attest.Fake.Setup.ProgressCallbackWithResult`3"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`3.Complete(`2)">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`3.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`3.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`3.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`3.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2},`0,`1)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallbackWithResult`4">
            <summary>
            Represent progress message callback with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`4.Create">
            <summary>
            Creates a new instance of <see cref="T:Attest.Fake.Setup.ProgressCallbackWithResult`4"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`4.Complete(`3)">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`4.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`4.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`4.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`4.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallbackWithResult`5">
            <summary>
            Represent progress message callback with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`5.Create">
            <summary>
            Creates a new instance of <see cref="T:Attest.Fake.Setup.ProgressCallbackWithResult`5"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`5.Complete(`4)">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`5.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`5.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`5.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`5.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressCallbackWithResult`6">
            <summary>
            Represent progress message callback with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`6.Create">
            <summary>
            Creates a new instance of <see cref="T:Attest.Fake.Setup.ProgressCallbackWithResult`6"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`6.Complete(`5)">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`6.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`6.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`6.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`6.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitor{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
            <param name="arg4">The fourth argument.</param>
            <param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressCallbackWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallbackWithResultVisitorAsync{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param><param name="arg1">The first argument.</param><param name="arg2">The second argument.</param><param name="arg3">The third argument.</param><param name="arg4">The fourth argument.</param><param name="arg5">The fifth argument.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultTemplateBase`1">
            <summary>
            Base class for method callback templates with return value.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallbackWithResultTemplateBase`1.Result">
            <summary>
            Gets the return value.
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultTemplate`1">
            <summary>
            Represents a template for method callback with return value.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>    
            <seealso cref="T:Attest.Fake.Setup.Contracts.IReturnResult`1" />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultTemplate`1.WithResult(`0)">
            <summary>
            Sets the expected return value.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultTemplate`1.Accept(Attest.Fake.Setup.IMethodCallbackWithResultTemplateVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultTemplate`2">
            <summary>
            Represents a template for method callback with return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IReturnResult`1" />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultTemplate`2.WithResult(`1)">
            <summary>
            Sets the expected return value.
            </summary>
            <param name="result">The expected return value.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultTemplate`2.Accept(Attest.Fake.Setup.IMethodCallbackWithResultTemplateVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultTemplate`3">
            <summary>
            Represents a template for method callback with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IReturnResult`1" />
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultTemplate`3.WithResult(`2)">
            <summary>
            Sets the expected return value.
            </summary>
            <param name="result">The expected return value.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultTemplate`3.Accept(Attest.Fake.Setup.IMethodCallbackWithResultTemplateVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.IMethodCallbackWithResultTemplateVisitor">
            <summary>
            Represents visitor for method callback tempaltes with return value.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.IMethodCallbackWithResultTemplateVisitor.Visit``1(Attest.Fake.Setup.MethodCallbackWithResultTemplate{``0})">
            <summary>
            Visits the specified method callback template with return value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.IMethodCallbackWithResultTemplateVisitor.Visit``2(Attest.Fake.Setup.MethodCallbackWithResultTemplate{``0,``1})">
            <summary>
            Visits the specified method callback template with return value and one parameter.
            </summary>
            <typeparam name="T">The ype of the parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.IMethodCallbackWithResultTemplateVisitor.Visit``3(Attest.Fake.Setup.MethodCallbackWithResultTemplate{``0,``1,``2})">
            <summary>
            Visits the specified method callback template with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.OnCompleteCallbackWithResultVisitor">
            <summary>
            Represents an implementation of <see cref="T:Attest.Fake.Setup.IMethodCallbackWithResultTemplateVisitor" /> for successful completion callbacks.
            </summary>
            <seealso cref="T:Attest.Fake.Setup.IMethodCallbackWithResultTemplateVisitor" />
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResultVisitor.Visit``1(Attest.Fake.Setup.MethodCallbackWithResultTemplate{``0})">
            <summary>
            Visits the specified method callback template with return value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResultVisitor.Visit``2(Attest.Fake.Setup.MethodCallbackWithResultTemplate{``0,``1})">
            <summary>
            Visits the specified method callback template with return value and one parameter.
            </summary>
            <typeparam name="T">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.OnCompleteCallbackWithResultVisitor.Visit``3(Attest.Fake.Setup.MethodCallbackWithResultTemplate{``0,``1,``2})">
            <summary>
            Visits the specified method callback template with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="methodCallbackTemplate">The method callback template.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitor`1">
            <summary>
            Represents visitor for different callbacks with return value and no parameters
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0})">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <returns>
            Return value
            </returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0})">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0})">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallbackWithResult">Callback</param>
            <returns>
            Return value
            </returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0})">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`1.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0})">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitor`2">
            <summary>
            Represents visitor for different callbacks with return value and one parameter.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallbackWithResult">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`2.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitor`3">
            <summary>
            Represents visitor for different callbacks with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`3.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitor`4">
            <summary>
            Represents visitor for different callbacks with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`4.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitor`5">
            <summary>
            Represents visitor for different callbacks with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`5.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitor`6">
            <summary>
            Represents visitor for different callbacks with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitor`6.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`1">
            <summary>
            Represents visitor for different async callbacks with return value and no parameters
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0})">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <returns>
            Return value
            </returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0})">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0})">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallbackWithResult">Callback</param>
            <returns>
            Return value
            </returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0})">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`1.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0})">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`2">
            <summary>
            Represents visitor for different async callbacks with return value and one parameter.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits exception throwing callback
            </summary>
            <param name="onErrorCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits cancellation callback
            </summary>
            <param name="onCancelCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits successful completion callback
            </summary>
            <param name="onCompleteCallbackWithResult">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits progress callback
            </summary>
            <param name="progressCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`2.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1},`0)">
            <summary>
            Visits never-ending callback
            </summary>
            <param name="withoutCallback">Callback</param>
            <param name="arg">Parameter</param>
            <returns>
            Return value
            </returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`3">
            <summary>
            Represents visitor for different async callbacks with return value and two parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`3.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2},`0,`1)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`4">
            <summary>
            Represents visitor for different async callbacks with return value and three parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`4.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`5">
            <summary>
            Represents visitor for different async callbacks with return value and four parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`5.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`6">
            <summary>
            Represents visitor for different callbacks with return value and five parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="T3">The type of the third parameter.</typeparam>
            <typeparam name="T4">The type of the fourth parameter.</typeparam>
            <typeparam name="T5">The type of the fifth parameter.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.OnErrorCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified error-throwing callback.
            </summary>
            <param name="onErrorCallback">The error-throwing callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.OnCancelCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified cancellation callback.
            </summary>
            <param name="onCancelCallback">The cancellation callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.CancelCallbackException"></exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.OnCompleteCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified successful completion callback.
            </summary>
            <param name="onCompleteCallbackWithResult">The successful completion callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The second parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.ProgressCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified progress callback.
            </summary>
            <param name="progressCallback">The progress callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Value-returning calls with progress messages are not supported</exception>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallbackWithResultVisitorAsync`6.Visit(Attest.Fake.Setup.OnWithoutCallbackWithResult{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Visits the specified never-ending callback.
            </summary>
            <param name="onWithoutCallback">The never-ending callback.</param>
            <param name="arg1">The first parameter.</param>
            <param name="arg2">The second parameter.</param>
            <param name="arg3">The third parameter.</param>
            <param name="arg4">The fourth parameter.</param>
            <param name="arg5">The fifth parameter.</param>
            <returns></returns>
            <exception cref="T:Attest.Fake.Setup.WithoutCallbackException"></exception>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResultBase`3">
            <summary>
            Base class for method calls with return value.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallWithResultBase`3.RunMethod">
            <summary>
            Method to be called
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallWithResultBase`3.RunMethodDescription">
            <summary>
            Gets the run method description.
            </summary>
            <value>
            The run method description.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultBase`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2}})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.MethodCallWithResultBase`3"/> class.
            </summary>
            <param name="runMethod">The run method.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultBase`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResult`2">
            <summary>
            Represents method call with return value.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>   
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`2.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`2.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`2.Complete(`1)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`2.Complete(System.Func{`1})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`2.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`2.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`2.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1},`1},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResult`3">
            <summary>
            Represents method call with return value and one parameter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`3.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,`2}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`3.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`3.Complete(`2)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`3.Complete(System.Func{`1,`2})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`3.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`3.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`3.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2},`1,`2},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResult`4">
            <summary>
            Represents method call with return value and two parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam> 
            <typeparam name="T2">The type of the second parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`4.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,`3}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`4.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`4.Complete(`3)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`4.Complete(System.Func{`1,`2,`3})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`4.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`4.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`4.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3},`1,`2,`3},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResult`5">
            <summary>
            Represents method call with return value and three parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam> 
            <typeparam name="T2">The type of the second parameter.</typeparam> 
            <typeparam name="T3">The type of the third parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`5.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,`4}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`5.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`5.Complete(`4)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`5.Complete(System.Func{`1,`2,`3,`4})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`5.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`5.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`5.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4},`1,`2,`3,`4},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResult`6">
            <summary>
            Represents method call with return value and four parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam> 
            <typeparam name="T2">The type of the second parameter.</typeparam> 
            <typeparam name="T3">The type of the third parameter.</typeparam> 
            <typeparam name="T4">The type of the fourth parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`6.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,`5}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`6.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`6.Complete(`5)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`6.Complete(System.Func{`1,`2,`3,`4,`5})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`6.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`6.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`6.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5},`1,`2,`3,`4,`5},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResult`7">
            <summary>
            Represents method call with return value and five parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam> 
            <typeparam name="T2">The type of the second parameter.</typeparam> 
            <typeparam name="T3">The type of the third parameter.</typeparam> 
            <typeparam name="T4">The type of the fourth parameter.</typeparam> 
            <typeparam name="T5">The type of the fifth parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`7.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,`6}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`7.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5,`6})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`7.Complete(`6)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`7.Complete(System.Func{`1,`2,`3,`4,`5,`6})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`7.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`7.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`7.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitor{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResult`7.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5,`6},`1,`2,`3,`4,`5,`6},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5,`6}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResultBaseAsync`3">
            <summary>
            Base class for async method calls with return value.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallWithResultBaseAsync`3.RunMethod">
            <summary>
            Method to be called
            </summary>
        </member>
        <member name="P:Attest.Fake.Setup.MethodCallWithResultBaseAsync`3.RunMethodDescription">
            <summary>
            Gets the run method description.
            </summary>
            <value>
            The run method description.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultBaseAsync`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.MethodCallWithResultBase`3"/> class.
            </summary>
            <param name="runMethod">The run method.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultBaseAsync`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResultAsync`2">
            <summary>
            Represents async method call with return value.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>   
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`2.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`1}}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`2.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`2.Complete(`1)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`2.Complete(System.Func{`1})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`2.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`2.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`2.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`2.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1},`1},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResultAsync`3">
            <summary>
            Represents async method call with return value and one parameter.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T">The type of the parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>    
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`3.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`3.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`3.Complete(`2)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`3.Complete(System.Func{`1,`2})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`3.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`3.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`3.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`3.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2},`1,`2},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResultAsync`4">
            <summary>
            Represents async method call with return value and two parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam> 
            <typeparam name="T2">The type of the second parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`4.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`3}}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`4.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`4.Complete(`3)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`4.Complete(System.Func{`1,`2,`3})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`4.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`4.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`4.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`4.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3},`1,`2,`3},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResultAsync`5">
            <summary>
            Represents async method call with return value and three parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam> 
            <typeparam name="T2">The type of the second parameter.</typeparam> 
            <typeparam name="T3">The type of the third parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`5.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`4}}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`5.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`5.Complete(`4)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`5.Complete(System.Func{`1,`2,`3,`4})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`5.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`5.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`5.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`5.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4},`1,`2,`3,`4},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResultAsync`6">
            <summary>
            Represents async method call with return value and four parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam> 
            <typeparam name="T2">The type of the second parameter.</typeparam> 
            <typeparam name="T3">The type of the third parameter.</typeparam> 
            <typeparam name="T4">The type of the fourth parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`6.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`5}}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`6.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`6.Complete(`5)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`6.Complete(System.Func{`1,`2,`3,`4,`5})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`6.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`6.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`6.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`6.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5},`1,`2,`3,`4,`5},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.MethodCallWithResultAsync`7">
            <summary>
            Represents async method call with return value and five parameters.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="T1">The type of the first parameter.</typeparam> 
            <typeparam name="T2">The type of the second parameter.</typeparam> 
            <typeparam name="T3">The type of the third parameter.</typeparam> 
            <typeparam name="T4">The type of the fourth parameter.</typeparam> 
            <typeparam name="T5">The type of the fifth parameter.</typeparam> 
            <typeparam name="TResult">The type of the return value.</typeparam>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`7.CreateMethodCall(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`6}}})">
            <summary>
            Creates the method call using the specified run method.
            </summary>
            <param name="runMethod">The specified run method.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`7.AddCallback(Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5,`6})">
            <summary>
            Adds custom callback to the callbacks container
            </summary>
            <param name="methodCallback">Custom callback</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`7.Complete(`6)">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="result">Successful completion return value</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`7.Complete(System.Func{`1,`2,`3,`4,`5,`6})">
            <summary>
            Adds successful completion callback to the callbacks container
            </summary>
            <param name="valueFunction">Successful completion return value's function</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`7.Throw(System.Exception)">
            <summary>
            Adds exception throwing callback to the callbacks container
            </summary>
            <param name="exception">Exception to be thrown</param>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`7.WithoutCallback">
            <summary>
            Adds never-ending callback to the callbacks container
            </summary>
            <returns>Callbacks container</returns>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`7.Accept(Attest.Fake.Setup.Contracts.IMethodCallWithResultVisitorAsync{`0})">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Attest.Fake.Setup.MethodCallWithResultAsync`7.BuildCallbacks(System.Func{Attest.Fake.Setup.Contracts.IHaveNoCallbacksWithResult{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5,`6},`1,`2,`3,`4,`5,`6},Attest.Fake.Setup.Contracts.IHaveCallbacks{Attest.Fake.Setup.Contracts.IMethodCallbackWithResult{`1,`2,`3,`4,`5,`6}}})">
            <summary>
            Builds the method call with return value from the specified build callbacks.
            </summary>
            <param name="buildCallbacks">The build callbacks.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.ICanAddProgressMessages">
            <summary>
            Represents an object that can add progress messages.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ICanAddProgressMessages.AddProgress(System.Object)">
            <summary>
            Adds the progress message.
            </summary>
            <param name="progressMessage">The progress message.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.IProgressableProcessRunning`1">
            <summary>
            Represents an object that contains progress messages and has not completed yet.
            </summary>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.ICanAddProgressMessages" />
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessRunning`1.Complete">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessRunning`1.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessRunning`1.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessRunning`1.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.IProgressableProcessRunningWithResult`2">
            <summary>
            Represents an object that contains progress messages with result and has not completed yet.
            </summary>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.ICanAddProgressMessages" />
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessRunningWithResult`2.Complete(`1)">
            <summary>
            Completes the progress messages stream by signaling successful completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessRunningWithResult`2.Throw(System.Exception)">
            <summary>
            Completes the progress messages stream by throwing exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessRunningWithResult`2.Cancel">
            <summary>
            Completes the progress messages stream by cancelling the associated operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessRunningWithResult`2.WithoutCallback">
            <summary>
            Completes the progress messages stream by signaling a never-ending operation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.IProgressableProcessFinished`1">
            <summary>
            Represents progress messages stream that has completed.
            </summary>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IHaveProgressMessages" />
        </member>
        <member name="P:Attest.Fake.Setup.IProgressableProcessFinished`1.FinishCallback">
            <summary>
            Gets the finish callback.
            </summary>
            <value>
            The finish callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessFinished`1.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.IProgressableProcessFinishedWithResult`2">
            <summary>
            Represents progress messages with result stream that has completed.
            </summary>
            <typeparam name="TCallback">The type of the callback.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IHaveProgressMessages" />
        </member>
        <member name="P:Attest.Fake.Setup.IProgressableProcessFinishedWithResult`2.FinishCallback">
            <summary>
            Gets the finish callback.
            </summary>
            <value>
            The finish callback.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.IProgressableProcessFinishedWithResult`2.AsMethodCallback">
            <summary>
            Return the correspondent method callback.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.ProgressMessagesBase">
            <summary>
            Base class for progress messages container.
            </summary>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IHaveProgressMessages" />
            <seealso cref="T:Attest.Fake.Setup.ICanAddProgressMessages" />
        </member>
        <member name="P:Attest.Fake.Setup.ProgressMessagesBase.ProgressMessages">
            <summary>
            Gets the progress messages.
            </summary>
            <value>
            The progress messages.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ProgressMessagesBase.AddProgress(System.Object)">
            <summary>
            Adds the progress message.
            </summary>
            <param name="progressMessage">The progress message.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.ResultWrapper`1">
            <summary>
            Represents an object that wraps return value of a method call.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <seealso />
        </member>
        <member name="M:Attest.Fake.Setup.ResultWrapper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ResultWrapper`1"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ResultWrapper`1.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ResultWrapper`1.Accept(Attest.Fake.Setup.Contracts.IResultWrapperVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ResultWrapper`2">
            <summary>
            Represents an object that wraps return value of a method call with 1 parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IResultWrapper`2" />
        </member>
        <member name="M:Attest.Fake.Setup.ResultWrapper`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ResultWrapper`2"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ResultWrapper`2.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ResultWrapper`2.Accept(Attest.Fake.Setup.Contracts.IResultWrapperVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns/>
        </member>
        <member name="T:Attest.Fake.Setup.ResultWrapper`3">
            <summary>
            Represents an object that wraps return value of a method call with 2 parameters.
            </summary>
            <typeparam name="T1">The type of the first parameter.</typeparam>
            <typeparam name="T2">The type of the second parameter.</typeparam>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IResultWrapper`3" />
        </member>
        <member name="M:Attest.Fake.Setup.ResultWrapper`3.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Attest.Fake.Setup.ResultWrapper`3"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Attest.Fake.Setup.ResultWrapper`3.Result">
            <summary>
            Gets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="M:Attest.Fake.Setup.ResultWrapper`3.Accept(Attest.Fake.Setup.Contracts.IResultWrapperVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <returns></returns>
        </member>
        <member name="T:Attest.Fake.Setup.ServiceCall`1">
            <summary>
            Represents a list of method calls on a specific type of service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <seealso cref="T:Attest.Fake.Setup.Contracts.IServiceCall`1" />
            <seealso cref="T:Attest.Fake.Setup.Contracts.IHaveNoMethods`1" />
        </member>
        <member name="M:Attest.Fake.Setup.ServiceCall`1.CreateServiceCall(Attest.Fake.Core.IFake{`0})">
            <summary>
            Creates a new instance of <see cref="T:Attest.Fake.Setup.ServiceCall`1"/> without method calls.
            </summary>
            <param name="fake">The initial fake.</param>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ServiceCall`1.Attest#Fake#Setup#Contracts#ICanAddMethods{TService}#AddMethodCall``1(Attest.Fake.Setup.Contracts.IMethodCall{`0,``0})">
            <summary>
            Adds a new method call without return value.
            </summary>
            <typeparam name="TCallback">Type of callback.</typeparam>
            <param name="methodCall">Method call.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.ServiceCall`1.Attest#Fake#Setup#Contracts#ICanAddMethods{TService}#AddMethodCallWithResult``2(Attest.Fake.Setup.Contracts.IMethodCallWithResult{`0,``0,``1})">
            <summary>
            Adds a new method call with return value.
            </summary>
            <typeparam name="TCallback">Type of callback.</typeparam>
            <typeparam name="TResult">Type of return value.</typeparam>
            <param name="methodCall">Method call.</param>
            <returns>Service call</returns>
        </member>
        <member name="M:Attest.Fake.Setup.ServiceCall`1.Solid#Patterns#Builder#IBuilder{Attest#Fake#Core#IFake{TService}}#Build">
            <summary>
            Sets the service calls and returns the fake object as its proxy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Attest.Fake.Setup.ServiceCall`1.Attest#Fake#Setup#Contracts#IAppendMethods{TService}#AppendMethods(Attest.Fake.Setup.Contracts.IHaveMethods{`0})">
            <summary>
            Appends the method calls.
            </summary>
            <param name="otherMethods">The other methods.</param>
        </member>
        <member name="T:Attest.Fake.Setup.ServiceCallFactory">
            <summary>
            Factory for creating instances of <see cref="T:Attest.Fake.Setup.ServiceCall`1"/>. 
            Note that the newly created instances have no method calls.
            </summary>
        </member>
        <member name="M:Attest.Fake.Setup.ServiceCallFactory.CreateServiceCall``1(Attest.Fake.Core.IFake{``0})">
            <summary>
            Creates the service call without method calls.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="fake">The fake.</param>
            <returns></returns>
        </member>
    </members>
</doc>
